<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Storage.Files.DataLake</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.Azure.DataLakeClientBuilderExtensions">
            <summary>
            Extension methods to add <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> client to clients builder.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.DataLakeClientBuilderExtensions.AddDataLakeServiceClient``1(``0,System.Uri)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> instance with the provided <paramref name="serviceUri" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.DataLakeClientBuilderExtensions.AddDataLakeServiceClient``1(``0,System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> instance with the provided <paramref name="serviceUri" /> and <paramref name="sharedKeyCredential" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.DataLakeClientBuilderExtensions.AddDataLakeServiceClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeClientOptions">
            <summary>
            Provides the client configuration options for connecting to Azure Data Lake service.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.LatestVersion">
            <summary>
            The Latest service version supported by this client library.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion">
            <summary>
            The versions of Azure Data Lake Sevice supported by this client
            library.  For more, see
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/versioning-for-the-azure-storage-services">
            Versioning for the Azure Storage services</see>.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2019_02_02">
            <summary>
            The 2019-02-02 service version described at
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/version-2019-02-02">
            Version 2019-02-02</see>
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2019_07_07">
            <summary>
            The 2019-07-07 service version described at
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/version-2019-07-07">
            Version 2019-07-07</see>
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2019_12_12">
            <summary>
            The 2019-12-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_02_10">
            <summary>
            The 2020-02-10 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_04_08">
            <summary>
            The 2020-04-08 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_06_12">
            <summary>
            The 2020-06-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_08_04">
            <summary>
            The 2020-08-14 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_10_02">
            <summary>
            The 2020-10-02 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2020_12_06">
            <summary>
            The 2020-12-06 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2021_02_12">
            <summary>
            The 2021-02-12 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2021_04_10">
            <summary>
            The 2021-04-10 serivce version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2021_06_08">
            <summary>
            The 2021-06-08 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2021_08_06">
            <summary>
            The 2021-08-06 service version.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion.V2021_10_04">
            <summary>
            The 2021-10-04 service version.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion" /> of the service API used when
            making requests.  For more, see
            <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/versioning-for-the-azure-storage-services">
            Versioning for the Azure Storage services</see>.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.CustomerProvidedKey">
            <summary>
            Gets the <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.CustomerProvidedKey" /> to be used when making requests.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeClientOptions.#ctor(Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" />
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.GeoRedundantSecondaryUri">
             <summary>
             Gets or sets the secondary storage <see cref="T:System.Uri" /> that can be read from for the storage account if the
             account is enabled for RA-GRS.
            
             If this property is set, the secondary Uri will be used for GET or HEAD requests during retries.
             If the status of the response from the secondary Uri is a 404, then subsequent retries for
             the request will not use the secondary Uri again, as this indicates that the resource
             may not have propagated there yet. Otherwise, subsequent retries will alternate back and forth
             between primary and secondary Uri.
             </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.EnableTenantDiscovery">
            <summary>
             Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.
            When enabled, the client will attempt an initial un-authorized request to prompt a challenge in order to discover the correct tenant for the resource.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation">
            <summary>
            Transfer validation options to be applied to blob transfers from this client.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeClientOptions.Build(Azure.Core.Pipeline.HttpPipelinePolicy)">
            <summary>
            Create an HttpPipeline from DataLakeClientOptions.
            </summary>
            <param name="authentication">Optional authentication policy.</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeClientOptions.Build(System.Object)">
            <summary>
            Create an HttpPipeline from DataLakeClientOptions.
            </summary>
            <param name="credentials">Optional authentication credentials.</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient">
            <summary>
            A DirectoryClient represents a URI to the Azure DataLake service allowing you to manipulate a directory.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="directoryPath">
             The path to the directory.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.String,System.String,System.String,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="directoryPath">
             The path to the directory.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
            <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.WithCustomerProvidedKey(System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey})">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
             class with an identical <see cref="T:System.Uri" /> source but the specified
             <paramref name="customerProvidedKey" />.
            
             </summary>
             <param name="customerProvidedKey">The customer provided key.</param>
             <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
             <remarks>
             Pass null to remove the customer provide key in the returned <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetFileClient(System.String)">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> object by appending
            <paramref name="fileName" /> to the end of <see cref="T:System.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetSubDirectoryClient(System.String)">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> object by appending
            <paramref name="subdirectoryName" /> to the end of <see cref="T:System.Uri" />.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
            </summary>
            <param name="subdirectoryName">The name of the subdirectory.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified directory
             for deletion, if the directory exists. The directory is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified directory
             for deletion, if the directory exists. The directory is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a Directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for
             the newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             paths's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Blob Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.
             If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the paths's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the PATH.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Blob Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.
             If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="fileName">
             The name of the file to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a new file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="fileName">
             Name of the file to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="fileName">
             The name of the file to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a new file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="fileName">
             Name of the file to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation deletes a file
             in this directory.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="fileName">
             The name of the file to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation deletes a file
             in this directory.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="fileName">
             The name of the file to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
             operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
             operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectory(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectory(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a sub directory in this directory.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the directory to delete.
             </param>
             <param name="continuation">
             Optional. When deleting a directory, the number of paths that are deleted with each invocation is limited.
             If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.
             When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete
             operation to continue deleting the directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectoryAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectoryAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a sub directory in this directory.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the directory to delete.
             </param>
             <param name="continuation">
             Optional. When deleting a directory, the number of paths that are deleted with each invocation is limited.
             If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.
             When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete
             operation to continue deleting the directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPaths(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPaths(System.Boolean,System.Boolean,System.Threading.CancellationToken)" /> operation returns an async sequence
             of paths in this directory.  Enumerating the paths may make
             multiple requests to the service while fetching all the values.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/list">
             List Path(s)</see>.
             </summary>
             <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
             <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.Pageable`1" />
             describing the paths in the directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPathsAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPaths(System.Boolean,System.Boolean,System.Threading.CancellationToken)" /> operation returns an async sequence
             of paths in this directory.  Enumerating the paths may make
             multiple requests to the service while fetching all the values.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/list">
             List Path(s)</see>.
             </summary>
             <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
             <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.Pageable`1" />
             describing the paths in the directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)" />
             returns a <see cref="T:System.Uri" /> that generates a DataLake Directory Service
             Shared Access Signature (SAS) Uri based on the Client properties and
             parameters passed. The SAS is signed by the shared key credential
             of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a service SAS</see>.
             </summary>
             <param name="permissions">
             Required. Specifies the list of permissions to be associated with the SAS.
             See <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" />.
             </param>
             <param name="expiresOn">
             Required. Specifies the time at which the SAS becomes invalid. This field
             must be omitted if it has been specified in an associated stored access policy.
             </param>
             <returns>
             A <see cref="T:System.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)" /> returns a <see cref="T:System.Uri" />
             that generates a DataLake Directory Service
             Shared Access Signature (SAS) Uri based on the Client properties
             and and builder. The SAS is signed by the shared key credential
             of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>.
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS).
             </param>
             <returns>
             A <see cref="T:System.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeExtensions">
            <summary>
            Data Lake enum extensions
            </summary>
            <summary>
            Data Lake enum extensions.
            </summary>
            <summary>
            Data Lake enum extensions
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeExtensions.ToPermissionsString(Azure.Storage.Sas.DataLakeAccountSasPermissions)">
            <summary>
            Create a permissions string to provide
            <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.Permissions" />.
            </summary>
            <returns>A permissions string.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeExtensions.ToPermissionsString(Azure.Storage.Sas.DataLakeFileSystemSasPermissions)">
            <summary>
            Create a permissions string to provide
            <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.Permissions" />.
            </summary>
            <returns>A permissions string.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeExtensions.ToPermissionsString(Azure.Storage.Sas.DataLakeSasPermissions)">
            <summary>
            Create a permissions string to provide
            <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.Permissions" />.
            </summary>
            <returns>A permissions string.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeFileClient">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> allows you to manipulate Azure Data Lake files.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileClient.MaxUploadBytes">
            <summary>
            Gets the maximum number of bytes that can be sent in each append call in
            to <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />.
            Supported value is now larger than <see cref="F:System.Int32.MaxValue" />; please use
            <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileClient.MaxUploadLongBytes" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileClient.MaxUploadLongBytes">
            <summary>
            Gets the maximum number of bytes that can be sent in each append call in
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="filePath">
             The path to the file.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.String,System.String,System.String,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="filePath">
             The path to the file.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />
            class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />
            class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the
            file.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> class.
            </summary>
            <param name="fileUri">
            A <see cref="T:System.Uri" /> referencing the file that includes the
            name of the account, the name of the file system, and the path of the file.
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.WithCustomerProvidedKey(System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey})">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />
             class with an identical <see cref="T:System.Uri" /> source but the specified
             <paramref name="customerProvidedKey" />.
            
             </summary>
             <param name="customerProvidedKey">The customer provided key.</param>
             <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> instance.</returns>
             <remarks>
             Pass null to remove the customer provide key in the returned <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Create(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Create(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> operation creates a file.
             If the file already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified file
             for deletion, if the file exists. The file is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified file
             for deletion, if the file exists. The file is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a Directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             paths's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Blob Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.
             If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the paths's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the PATH.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Blob Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.
             If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Append(System.IO.Stream,System.Int64,Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Append(System.IO.Stream,System.Int64,Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions,System.Threading.CancellationToken)" /> operation uploads data to be appended to a file.
             Data can only be appended to a file.
             To apply previously uploaded data to a file, call Flush Data.
             Append is currently limited to 4000 MB per request.  To upload large files all at once, consider using <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="offset">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written, to the file.
             To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length
             of the file after all data has been written, and there must not be a request entity body included with the request.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing the state
             of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendAsync(System.IO.Stream,System.Int64,Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendAsync(System.IO.Stream,System.Int64,Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions,System.Threading.CancellationToken)" /> operation uploads data to be appended to a file.  Data can only be appended to a file.
             To apply perviously uploaded data to a file, call Flush Data.
             Append is currently limited to 4000 MB per request.  To upload large files all at once, consider using <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="offset">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written, to the file.
             To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length
             of the file after all data has been written, and there must not be a request entity body included with the request.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing the state
             of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Append(System.IO.Stream,System.Int64,System.Byte[],System.String,System.IProgress{System.Int64},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Append(System.IO.Stream,System.Int64,System.Byte[],System.String,System.IProgress{System.Int64},System.Threading.CancellationToken)" /> operation uploads data to be appended to a file.
             Data can only be appended to a file.
             To apply previously uploaded data to a file, call Flush Data.
             Append is currently limited to 4000 MB per request.  To upload large files all at once, consider using <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="offset">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written, to the file.
             To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length
             of the file after all data has been written, and there must not be a request entity body included with the request.
             </param>
             <param name="contentHash">
             This hash is used to verify the integrity of the request content during transport. When this header is specified,
             the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match,
             the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is
             associated with the request content, and not with the stored content of the file itself.
             </param>
             <param name="leaseId">
             Optional lease id.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing the state
             of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendAsync(System.IO.Stream,System.Int64,System.Byte[],System.String,System.IProgress{System.Int64},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendAsync(System.IO.Stream,System.Int64,System.Byte[],System.String,System.IProgress{System.Int64},System.Threading.CancellationToken)" /> operation uploads data to be appended to a file.  Data can only be appended to a file.
             To apply perviously uploaded data to a file, call Flush Data.
             Append is currently limited to 4000 MB per request.  To upload large files all at once, consider using <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="offset">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written, to the file.
             To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length
             of the file after all data has been written, and there must not be a request entity body included with the request.
             </param>
             <param name="contentHash">
             This hash is used to verify the integrity of the request content during transport. When this header is specified,
             the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match,
             the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is
             associated with the request content, and not with the stored content of the file itself.
             </param>
             <param name="leaseId">
             Optional lease id.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing the state
             of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendInternal(System.IO.Stream,System.Nullable{System.Int64},Azure.Storage.UploadTransferValidationOptions,System.String,System.IProgress{System.Int64},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.AppendInternal(System.IO.Stream,System.Nullable{System.Int64},Azure.Storage.UploadTransferValidationOptions,System.String,System.IProgress{System.Int64},System.Nullable{System.Boolean},System.Boolean,System.Threading.CancellationToken)" /> operation uploads data to be appended to a file.  Data can only be appended to a file.
             To apply perviously uploaded data to a file, call Flush Data.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="offset">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written, to the file.
             To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length
             of the file after all data has been written, and there must not be a request entity body included with the request.
             </param>
             <param name="validationOptionsOverride">
             Optional settings for transfer validation.
             </param>
             <param name="leaseId">
             Lease id for operation.
             </param>
             <param name="progressHandler">
             Progress handler for append operation.
             </param>
             <param name="flush">
             Optional.  If true, the file will be flushed after the append.
             </param>
             <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing the state
             of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Flush(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Flush(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation flushes (writes) previously
             appended data to a file.
             </summary>
             <param name="position">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written,
             to the file. To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
             equal to the length of the file after all data has been written, and there must not be a request entity body included
             with the request.
             </param>
             <param name="retainUncommittedData">
             If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted
             after the flush operation. The default is false. Data at offsets less than the specified position are written to the
             file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future
             flush operation.
             </param>
             <param name="close">
             Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled,
             a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the
             difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter
             is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the
             flush operation completes successfully, the service raises a file change notification with a property indicating that
             this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the
             file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that
             the file stream has been closed."
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the flush of this file.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.FlushAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.FlushAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation flushes (writes) previously
             appended data to a file.
             </summary>
             <param name="position">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written,
             to the file. To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
             equal to the length of the file after all data has been written, and there must not be a request entity body included
             with the request.
             </param>
             <param name="retainUncommittedData">
             If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted
             after the flush operation. The default is false. Data at offsets less than the specified position are written to the
             file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future
             flush operation.
             </param>
             <param name="close">
             Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled,
             a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the
             difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter
             is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the
             flush operation completes successfully, the service raises a file change notification with a property indicating that
             this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the
             file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that
             the file stream has been closed."
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the flush of this file.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.FlushInternal(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.FlushInternal(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" /> operation flushes (writes) previously
             appended data to a file.
             </summary>
             <param name="position">
             This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.
             It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.
             The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written,
             to the file. To flush, the previously uploaded data must be contiguous, the position parameter must be specified and
             equal to the length of the file after all data has been written, and there must not be a request entity body included
             with the request.
             </param>
             <param name="retainUncommittedData">
             If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted
             after the flush operation. The default is false. Data at offsets less than the specified position are written to the
             file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future
             flush operation.
             </param>
             <param name="close">
             Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled,
             a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the
             difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter
             is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the
             flush operation completes successfully, the service raises a file change notification with a property indicating that
             this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the
             file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that
             the file stream has been closed.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the flush of this file.
             </param>
             <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read" /> operation downloads a file from
             the service, including its metadata and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync" /> operation downloads a file from
             the service, including its metadata and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(System.Threading.CancellationToken)" /> operation downloads a file from
             the service, including its metadata and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the blob's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(System.Threading.CancellationToken)" /> operation downloads a file from
             the service, including its metadata and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a file from the service, including its metadata
             and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="range">
             If provided, only donwload the bytes of the file in the specified
             range.  If not provided, download the entire file.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             donwloading this file.
             </param>
             <param name="rangeGetContentHash">
             When set to true and specified together with the <paramref name="range" />,
             the service returns the MD5 hash for the range, as long as the
             range is less than or equal to 4 MB in size.  If this value is
             specified without <paramref name="range" /> or set to true when the
             range exceeds 4 MB in size, a <see cref="T:Azure.RequestFailedException" />
             is thrown.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a file from the service, including its metadata
             and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="range">
             If provided, only donwload the bytes of the file in the specified
             range.  If not provided, download the entire file.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             donwloading this file.
             </param>
             <param name="rangeGetContentHash">
             When set to true and specified together with the <paramref name="range" />,
             the service returns the MD5 hash for the range, as long as the
             range is less than or equal to 4 MB in size.  If this value is
             specified without <paramref name="range" /> or set to true when the
             range exceeds 4 MB in size, a <see cref="T:Azure.RequestFailedException" />
             is thrown.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a file from the service, including its metadata
             and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadAsync(Azure.HttpRange,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" />
             operation downloads a file from the service, including its metadata
             and properties.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob">
             Get Blob</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             downloaded file.  <see cref="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content" /> contains
             the file's data.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to the provided stream.
            </summary>
            <param name="destination">
            Destination stream for writing read contents.
            </param>
            <param name="options">
            Options for reading this blob.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to the provided file path.
            </summary>
            <param name="path">
            File path to write read contents to.
            </param>
            <param name="options">
            Options for reading this blob.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to the provided destination stream.
            </summary>
            <param name="destination">
            Stream to write read contents to.
            </param>
            <param name="options">
            Options for reading this blob.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to the provided file path.
            </summary>
            <param name="path">
            File path to write the read contents to.
            </param>
            <param name="options">
            Options for reading this blob.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to <paramref name="destination" />.
            </summary>
            <param name="destination">
            A <see cref="T:System.IO.Stream" /> to write the downloaded content to.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of this file.
            </param>
            <param name="transferOptions">
            Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
            parallel transfer behavior.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadTo(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to <paramref name="path" />.
            </summary>
            <param name="path">
            A file path to write the downloaded content to.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of this file.
            </param>
            <param name="transferOptions">
            Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
            parallel transfer behavior.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to <paramref name="destination" />.
            </summary>
            <param name="destination">
            A <see cref="T:System.IO.Stream" /> to write the downloaded content to.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of this file.
            </param>
            <param name="transferOptions">
            Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
            parallel transfer behavior.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ReadToAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
            operation downloads an entire file using parallel requests,
            and writes the content to <paramref name="path" />.
            </summary>
            <param name="path">
            A file path to write the downloaded content to.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of this file.
            </param>
            <param name="transferOptions">
            Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
            parallel transfer behavior.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response" /> describing the operation.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.  If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Conditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.  If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update" />.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to apply to the request.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="transferOptions">
             Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
             parallel transfer behavior.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the overwrite parameter is not specified and
             the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="overwrite">
             Whether the upload should overwrite an existing file.  The
             default value is false.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated file.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file. If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Conditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.  If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to apply to the request.
             </param>
             <param name="transferOptions">
             Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
             parallel transfer behavior.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the overwrite parameter is not specified and
             the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
             <param name="overwrite">
             Whether the upload should overwrite an existing file.  The
             default value is false.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Conditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param> of this new block blob.
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param> of this new block blob.
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to apply to the request.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="transferOptions">
             Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
             parallel transfer behavior.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param> of this new block blob.
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.String,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the overwrite parameter is not specified and
             the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param> of this new block blob.
             <param name="overwrite">
             Whether the upload should overwrite an existing file.  The
             default value is false.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.  If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Conditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.IProgress{System.Int64},Azure.Storage.StorageTransferOptions,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.  If the file already exists, its content will be overwritten,
             unless otherwise specified in the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> or alternatively use
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream)" />, <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the file.
            </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to apply to the request.
             </param>
             <param name="progressHandler">
             Optional <see cref="T:System.IProgress`1" /> to provide
             progress updates about data transfers.
             </param>
             <param name="transferOptions">
             Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
             parallel transfer behavior.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             operation creates and uploads content to a file.
            
             If the overwrite parameter is not specified and
             the file already exists, then its content will not be overwritten.
             The request will be sent with If-None-Match Header with the value of
             the special wildcard. So if the file already exists a
             <see cref="T:Azure.RequestFailedException" /> is expected to be thrown.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="path">
             A file path containing the content to upload.
             </param>
             <param name="overwrite">
             Whether the upload should overwrite an existing file.  The
             default value is false.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.StagedUploadInternal(System.IO.Stream,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This operation will upload data as indiviually staged
            blocks if it's larger than the
            <paramref name="options" /> <see cref="P:Azure.Storage.StorageTransferOptions.InitialTransferSize" />.
            </summary>
            <param name="content">
            A <see cref="T:System.IO.Stream" /> containing the content to upload.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="async">
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing the
            state of the updated file.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.StagedUploadInternal(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This operation will upload data it as individually staged
            blocks if it's larger than the
            <paramref name="options" /> <see cref="P:Azure.Storage.StorageTransferOptions.InitialTransferSize" />.
            </summary>
            <param name="path">
            A file path of the file to upload.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="async">
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing the
            state of the updated block blob.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ScheduleDeletion(Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions,System.Threading.CancellationToken)">
            <summary>
            Schedules the file for deletion.
            </summary>
            <param name="options">
            Schedule deletion parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing the file.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.ScheduleDeletionAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions,System.Threading.CancellationToken)">
            <summary>
            Schedules the file for deletion.
            </summary>
            <param name="options">
            Schedule deletion parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing the file.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Query(System.String,Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Query(System.String,Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions,System.Threading.CancellationToken)" /> API returns the
            result of a query against the file.
            </summary>
            <param name="querySqlExpression">
            The query. For a sample SQL query expression, see <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-query-acceleration-how-to?tabs=dotnet%2Cpowershell#retrieve-data-by-using-a-filter">this </see>article.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
            <returns>
            A <see cref="T:Azure.Response`1" />.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.QueryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Query(System.String,Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions,System.Threading.CancellationToken)" /> API returns the
            result of a query against the file.
            </summary>
            <param name="querySqlExpression">
            The query. For a sample SQL query expression, see <see href="https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-query-acceleration-how-to?tabs=dotnet%2Cpowershell#retrieve-data-by-using-a-filter">this </see>article.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
            <returns>
            A <see cref="T:Azure.Response`1" />.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenRead(Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenReadAsync(Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenRead(System.Int64,System.Nullable{System.Int32},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="position">
            The position within the file to begin the stream.
            Defaults to the beginning of the file.
            </param>
            <param name="bufferSize">
            The buffer size to use when the stream downloads parts
            of the file.  Defaults to 1 MB.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of this file.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenRead(System.Boolean,System.Int64,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="allowfileModifications">
            If true, you can continue streaming a blob even if it has been modified.
            </param>
            <param name="position">
            The position within the file to begin the stream.
            Defaults to the beginning of the file.
            </param>
            <param name="bufferSize">
            The buffer size to use when the stream downloads parts
            of the file.  Defaults to 1 MB.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenReadAsync(System.Int64,System.Nullable{System.Int32},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="position">
            The position within the file to begin the stream.
            Defaults to the beginning of the file.
            </param>
            <param name="bufferSize">
            The buffer size to use when the stream downloads parts
            of the file.  Defaults to 1 MB.
            </param>
            <param name="conditions">
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of the file.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenReadAsync(System.Boolean,System.Int64,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Opens a stream for reading from the file.  The stream will only download
            the file as the stream is read from.
            </summary>
            <param name="allowfileModifications">
            If true, you can continue streaming a blob even if it has been modified.
            </param>
            <param name="position">
            The position within the file to begin the stream.
            Defaults to the beginning of the file.
            </param>
            <param name="bufferSize">
            The buffer size to use when the stream downloads parts
            of the file.  Defaults to 1 MB.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns a stream that will download the file as the stream
            is read from.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenWrite(System.Boolean,Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for writing to the file.
            </summary>
            <param name="overwrite">
            Whether an existing blob should be deleted and recreated.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A stream to write to the file.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenWriteAsync(System.Boolean,Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions,System.Threading.CancellationToken)">
            <summary>
            Opens a stream for writing to the file..
            </summary>
            <param name="overwrite">
            Whether an existing blob should be deleted and recreated.
            </param>
            <param name="options">
            Optional parameters.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A stream to write to the file.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> allows you to manipulate Azure
            Data Lake file systems and their directories and files.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeFileSystemClient._containerClient">
            <summary>
            A <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> assoicated with the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.ContainerClient">
            <summary>
            ContainerClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri">
            <summary>
            Gets the file systems's primary <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> endpoint.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.ClientConfiguration">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.AccountName">
            <summary>
            Gets the Storage account name corresponding to the share client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Name">
            <summary>
            Gets the name of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CanGenerateSasUri">
            <summary>
            Determines whether the client is able to generate a SAS.
            If the client is authenticated with a <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.FileSystemRestClient">
            <summary>
            FileSystemRestClient.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.BlobFileSystemRestClient">
            <summary>
            FileSystemRestClient pointed at the blob endpoint.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
             <param name="fileSystemName">
             The name of the blob container in the storage account to reference.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.String,System.String,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>.
             </param>
             <param name="fileSystemName">
             The name of the blob container in the storage account to reference.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the share that includes the
            name of the account and the name of the file system.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDirectoryClient(System.String)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> object by appending
            <paramref name="directoryName" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />.
            </summary>
            <param name="directoryName">The name of the directory.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetRootDirectoryClient">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> for the
            root directory of the file system.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /></returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetFileClient(System.String)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> object by appending
            <paramref name="fileName" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" />.
            </summary>
            <param name="fileName">The name of the directory.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system
             under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Create(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file system within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for pathss.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate pathss within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system
             under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             If the container does not already exist, a <see cref="T:Azure.Response`1" />
             describing the newly created container. If the container already exists, <c>null</c>.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system
             under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file system within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for pathss.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate pathss within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             If the container does not already exist, a <see cref="T:Azure.Response`1" />
             describing the newly created container. If the container already exists, <c>null</c>.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the same name
             already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file system within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for pathss.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate pathss within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion. The file system and any paths contained
             within it are later deleted during garbage collection
             which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion. The file system and any paths contained
             within it are later deleted during garbage collection which could
             take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this cofile systemntainer.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion if it exists. The file system and any files
             and directories contained within it are later deleted during garbage collection
             which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             file system for deletion if it exists. The file system and any files
             and directories contained within it are later deleted during garbage collection
             which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this cofile systemntainer.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Exists(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Exists(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> to see if the associated
            file system exists on the storage account in the storage service.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the file system exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the file system if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.ExistsAsync(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> to see if the associated
            file system exists on the storage account in the storage service.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the file system exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the file system if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             file system. The data returned does not include the file system's
             list of paths.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties">
             Get Container Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             file system and its properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             file system. The data returned does not include the file system's
             list of paths.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties">
             Get Container Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             file system and its properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified file system.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata">
             Set Container Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this file system.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified file system.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata">
             Set Container Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this file system.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPaths(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPaths(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
             operation returns an async sequence of paths in this file system.
             Enumerating the paths may make multiple requests to the service
             while fetching all the values.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/list">
             List Path(s)</see>.
             </summary>
             <param name="path">
             Filters results to paths within the specified directory.
             </param>
             <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
             <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.Pageable`1" />
             describing the paths in the file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
             operation returns an async sequence of paths in this file system.  Enumerating
             the paths may make multiple requests to the service while fetching all the
             values.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/list">
             List Path(s)</see>.
             </summary>
             <param name="path">
             Filters results to paths within the specified directory.
             </param>
             <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
             <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             paths in the file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsInternal(System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsInternal(System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.Threading.CancellationToken)" /> operation returns a
             single segment of paths in this file system, starting
             from the specified <paramref name="continuation" />.  Use an empty
             <paramref name="continuation" /> to start enumeration from the beginning
             and the <see cref="P:Azure.Storage.Files.DataLake.Models.PathSegment.Continuation" /> if it's not
             empty to make subsequent calls to
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathsAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
             to continue enumerating the paths segment by segment. Paths are
             ordered lexicographically by name.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/datalakestoragegen2/path/list">
             List Path(s)</see>.
             </summary>
             <param name="path">
             Filters results to paths within the specified directory.
             </param>
             <param name="recursive">
             If "true", all paths are listed; otherwise, only paths at the root of the filesystem are listed.
             </param>
             <param name="userPrincipalName">
             Optional. Valid only when Hierarchical Namespace is enabled for the account. If
             "true", the user identity values returned in the owner and group fields of each list
             entry will be transformed from Azure Active Directory Object IDs to User Principal
             Names. If "false", the values will be returned as Azure Active Directory Object IDs.
             The default value is false. Note that group and application Object IDs are not translated
             because they do not have unique friendly names.
             </param>
             <param name="continuation">
             The number of paths returned with each invocation is limited. If the number of paths
             to be returned exceeds this limit, a continuation token is returned in the response header
             x-ms-continuation. When a continuation token is returned in the response, it must be specified
             in a subsequent invocation of the list operation to continue listing the paths.
             </param>
             <param name="maxResults">
             An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000,
             the response will include up to 5,000 items.
             </param>
             <param name="operationName">
             The name of the operation.
             </param>
             <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing a
             segment of the paths in the file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
             operation creates a directory in this file system.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
             operation creates a directory in this file system.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a directory in this file system.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a directory in this file system.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the directory to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectory(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the directory to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a directory in this file system.
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the directory to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file in this file system.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the file to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> creates a file in this file system.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the file to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a file in this file system.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the file to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             creates a file in this file system.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="path">
             The path to the file to create.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a file in this file system.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the file to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a file in this file system.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="path">
             The path to the file to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicy(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicy(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this file system. The permissions indicate whether
             file system data may be accessed publicly.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl">
             Get Container ACL</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's access policy.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the filesystems's access policy.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this file system. The permissions indicate whether
             file system data may be accessed publicly.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl">
             Get Container ACL</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the file system's access policy.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the file system's access policy.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicy(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicy(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified file system. The permissions indicate
             whether file system data may be accessed publicly.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-acl">
             Set Container ACL</see>.
             </summary>
             <param name="accessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over file system permissions.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on setting this file systems's access policy.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.SetAccessPolicyAsync(Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified file system. The permissions indicate
             whether the file system data may be accessed publicly.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-acl">
             Set Container ACL</see>.
             </summary>
             <param name="accessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over file system permissions.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on setting this file system's access policy.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GenerateSasUri(Azure.Storage.Sas.DataLakeFileSystemSasPermissions,System.DateTimeOffset)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GenerateSasUri(Azure.Storage.Sas.DataLakeFileSystemSasPermissions,System.DateTimeOffset)" />
             returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> that generates a DataLake FileSystem Service
             Shared Access Signature (SAS) Uri based on the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
             properties and parameters passed. The SAS is signed by the shared key credential
             of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a service SAS</see>.
             </summary>
             <param name="permissions">
             Required. Specifies the list of permissions to be associated with the SAS.
             See <see cref="T:Azure.Storage.Sas.DataLakeFileSystemSasPermissions" />.
             </param>
             <param name="expiresOn">
             Required. Specifies the time at which the SAS becomes invalid. This field
             must be omitted if it has been specified in an associated stored access policy.
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)" /> returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />
             that generates a DataLake FileSystem Service Shared Access Signature (SAS)
             Uri based on the Client properties and builder passed.
             The SAS is signed by the shared key credential of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>.
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS).
             </param>
             <returns>
             A <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" /> on successfully deleting.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDeletedPaths(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the paths that have recently been soft deleted in this file system.
            </summary>
            <param name="pathPrefix">
            Filters results to paths within the specified directory.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            An <see cref="T:Azure.Pageable`1" />
            describing the deleted paths in the file system.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDeletedPathsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the paths that have recently been soft deleted in this file system.
            </summary>
            <param name="pathPrefix">
            Filters results to paths within the specified directory.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            An <see cref="T:Azure.Pageable`1" />
            describing the deleted paths in the file system.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.UndeletePath(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Restores a soft deleted path.
            </summary>
            <param name="deletedPath">
            Required.  The path of the deleted path.
            </param>
            <param name="deletionId">
            Required.  The deletion ID associated with the soft deleted path.
            You can get soft deleted paths and their assocaited deletion IDs with <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDeletedPathsAsync(System.String,System.Threading.CancellationToken)" />.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> pointed at the newly
            restored path.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.UndeletePathAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Restores a soft deleted path.
            </summary>
            <param name="deletedPath">
            Required.  The path of the deleted path.
            </param>
            <param name="deletionId">
            Required.  The deletion ID associated with the soft deleted path.
            You can get soft deleted paths and their associated deletion IDs with <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetDeletedPathsAsync(System.String,System.Threading.CancellationToken)" />.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> pointed at the newly
            restored path.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetPathClient(System.String)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> object by appending
            <paramref name="path" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <param name="path">The name of the directory.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeFileSystemClient.GetParentServiceClientCore">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />'s parent container.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> instance.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Specialized.SpecializedDataLakeExtensions">
            <summary>
            Add easy to discover methods to <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> for
            creating <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> instances.
            </summary>
            <summary>
            Add easy to discover methods to <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> for
            creating <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> instances.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Specialized.SpecializedDataLakeExtensions.GetParentServiceClient(Azure.Storage.Files.DataLake.DataLakeFileSystemClient)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />'s parent container.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <param name="client">The <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Specialized.SpecializedDataLakeExtensions.GetParentFileSystemClient(Azure.Storage.Files.DataLake.DataLakePathClient)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />'s parent container.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <param name="client">The <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Specialized.SpecializedDataLakeExtensions.GetParentDirectoryClient(Azure.Storage.Files.DataLake.DataLakePathClient)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />'s parent directory.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <param name="client">The <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.</param>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" /> allows you to manipulate Azure
            Storage leases on paths.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakeLeaseClient.InfiniteLeaseDuration">
            <summary>
            The <see cref="T:System.TimeSpan" /> representing an infinite lease duration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Uri">
            <summary>
            Gets the URI of the object being leased.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId">
            <summary>
            Gets the Lease ID for this lease.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ClientDiagnostics">
            <summary>
            The <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ClientDiagnostics" /> instance used to create diagnostic scopes
            every request.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" /> class
            for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.#ctor(Azure.Storage.Files.DataLake.DataLakePathClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" />  class.
            </summary>
            <param name="client">
            A <see cref="T:Azure.Storage.Blobs.BlobClient" /> representing the blob being leased.
            </param>
            <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.#ctor(Azure.Storage.Files.DataLake.DataLakeFileSystemClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" />  class.
            </summary>
            <param name="client">
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> representing the file system
            being leased.
            </param>
            <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Acquire(System.TimeSpan,Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Acquire(System.TimeSpan,Azure.RequestConditions,System.Threading.CancellationToken)" /> operation acquires a lease on
             the path or file system.  The lease <paramref name="duration" /> must
             be between 15 to 60 seconds, or infinite (-1).
            
             If the file system does not have an active lease, the Data Lake service
             creates a lease on the path or file system and returns it.  If the
             file system has an active lease, you can only request a new lease
             using the active lease ID as <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" />, but you can
             specify a new <paramref name="duration" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="duration">
             Specifies the duration of the lease, in seconds, or specify
             <see cref="F:Azure.Storage.Files.DataLake.DataLakeLeaseClient.InfiniteLeaseDuration" /> for a lease that never expires.
             A non-infinite lease can be between 15 and 60 seconds.
             A lease duration cannot be changed using <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.RenewAsync(Azure.RequestConditions,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ChangeAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.AcquireAsync(System.TimeSpan,Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.AcquireAsync(System.TimeSpan,Azure.RequestConditions,System.Threading.CancellationToken)" /> operation acquires a lease on
             the path or file system.  The lease <paramref name="duration" /> must
             be between 15 to 60 seconds, or infinite (-1).
            
             If the file system does not have an active lease, the Data Lake service
             creates a lease on the file system or path and returns it.  If the
             file system has an active lease, you can only request a new lease
             using the active lease ID as <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" />, but you can
             specify a new <paramref name="duration" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="duration">
             Specifies the duration of the lease, in seconds, or specify
             <see cref="F:Azure.Storage.Files.DataLake.DataLakeLeaseClient.InfiniteLeaseDuration" /> for a lease that never expires.
             A non-infinite lease can be between 15 and 60 seconds.
             A lease duration cannot be changed using <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.RenewAsync(Azure.RequestConditions,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ChangeAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Renew(Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Renew(Azure.RequestConditions,System.Threading.CancellationToken)" /> operation renews the path or
             file system's previously-acquired lease.
            
             The lease can be renewed if the leaseId
             matches that associated with the path or file system.  Note that the
             lease may be renewed even if it has expired as long as the path or
             file system has not been leased again since the expiration of that
             lease.  When you renew a lease, the lease duration clock resets.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.RenewAsync(Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.RenewAsync(Azure.RequestConditions,System.Threading.CancellationToken)" /> operation renews the path or
             file system's previously-acquired lease.
            
             The lease can be renewed if the leaseId
             matches that associated with the path or file system.  Note that the
             lease may be renewed even if it has expired as long as the path or
             file system has not been leased again since the expiration of that
             lease.  When you renew a lease, the lease duration clock resets.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Release(Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Release(Azure.RequestConditions,System.Threading.CancellationToken)" /> operation releases the
             file system or path's previously-acquired lease.
            
             The lease may be released if the <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" />
             matches that associated with the file system or path.  Releasing the
             lease allows another client to immediately acquire the lease for the
             file system or path as soon as the release is complete.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated path or file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ReleaseAsync(Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ReleaseAsync(Azure.RequestConditions,System.Threading.CancellationToken)" /> operation releases the
             file system or path's previously-acquired lease.
            
             The lease may be released if the <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" />
             matches that associated with the file system or path.  Releasing the
             lease allows another client to immediately acquire the lease for the
             file system or path as soon as the release is complete.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated path or file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Change(System.String,Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Change(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> operation changes the lease
             of an active lease.  A change must include the current
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" /> and a new <paramref name="proposedId" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="proposedId">
             An optional proposed lease ID, in a GUID string format. A
             <see cref="T:Azure.RequestFailedException" /> will be thrown if the
             proposed lease ID is not in the correct format.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ChangeAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ChangeAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> operation changes the lease
             of an active lease.  A change must include the current
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeLeaseClient.LeaseId" /> and a new <paramref name="proposedId" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="proposedId">
             An optional proposed lease ID, in a GUID string format. A
             <see cref="T:Azure.RequestFailedException" /> will be thrown if the
             proposed lease ID is not in the correct format.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Break(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Break(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)" /> operation breaks the path or
             file system's previously-acquired lease (if it exists).
            
             Once a lease is broken, it cannot be renewed.  Any authorized
             request can break the lease; the request is not required to
             specify a matching lease ID.  When a lease is broken, the lease
             break <paramref name="breakPeriod" /> is allowed to elapse,
             during which time no lease operation except
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Break(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)" /> and <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.Release(Azure.RequestConditions,System.Threading.CancellationToken)" /> can be
             performed on the path or file system.  When a lease is successfully
             broken, the response indicates the interval in seconds until a new
             lease can be acquired.
            
             A lease that has been broken can also be released.  A client can
             immediately acquire a path or file system lease that has been
             released.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="breakPeriod">
             Specifies the proposed duration the lease should continue before
             it is broken, in seconds, between 0 and 60.  This break period is
             only used if it is shorter than the time remaining on the lease.
             If longer, the time remaining on the lease is used.  A new lease
             will not be available before the break period has expired, but the
             lease may be held for longer than the break period.  If this value
             is not provided, a fixed-duration lease breaks after the remaining
             lease period elapses, and an infinite lease breaks immediately.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the broken lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.BreakAsync(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.BreakAsync(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)" /> operation breaks the path or
             file system's previously-acquired lease (if it exists).
            
             Once a lease is broken, it cannot be renewed.  Any authorized
             request can break the lease; the request is not required to
             specify a matching lease ID.  When a lease is broken, the lease
             break <paramref name="breakPeriod" /> is allowed to elapse,
             during which time no lease operation except
             <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.BreakAsync(System.Nullable{System.TimeSpan},Azure.RequestConditions,System.Threading.CancellationToken)" /> and <see cref="M:Azure.Storage.Files.DataLake.DataLakeLeaseClient.ReleaseAsync(Azure.RequestConditions,System.Threading.CancellationToken)" /> can be
             performed on the path or file system.  When a lease is successfully
             broken, the response indicates the interval in seconds until a new
             lease can be acquired.
            
             A lease that has been broken can also be released.  A client can
             immediately acquire a path or file system lease that has been
             released.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/lease-container">
             Lease Container</see>.
             </summary>
             <param name="breakPeriod">
             Specifies the proposed duration the lease should continue before
             it is broken, in seconds, between 0 and 60.  This break period is
             only used if it is shorter than the time remaining on the lease.
             If longer, the time remaining on the lease is used.  A new lease
             will not be available before the break period has expired, but the
             lease may be held for longer than the break period.  If this value
             is not provided, a fixed-duration lease breaks after the remaining
             lease period elapses, and an infinite lease breaks immediately.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.RequestConditions" /> to add
             conditions on acquiring a lease.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the broken lease.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeLeaseClientExtensions">
            <summary>
            Add easy to discover methods to <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> and
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> for easily creating <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" />
            instances.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClientExtensions.GetDataLakeLeaseClient(Azure.Storage.Files.DataLake.DataLakePathClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" /> class.
            </summary>
            <param name="client">
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> representing the path being leased.
            </param>
            <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeLeaseClientExtensions.GetDataLakeLeaseClient(Azure.Storage.Files.DataLake.DataLakeFileSystemClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeLeaseClient" /> class.
            </summary>
            <param name="client">
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> representing the file system being leased.
            </param>
            <param name="leaseId">
            An optional lease ID.  If no lease ID is provided, a random lease
            ID will be created.
            </param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakePathClient">
            <summary>
            A PathClient represents a URI to the Azure DataLake service allowing you to manipulate a file or directory.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakePathClient._blockBlobClient">
            <summary>
            A <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> associated with the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.BlobClient">
            <summary>
            A <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" /> associated with the path.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.DataLakePathClient._fileSystemClient">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> associated with Directory's parent File System.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.FileSystemClient">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> associated with Directory's parent File System.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.BlobUri">
            <summary>
            The paths's blob <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> endpoint.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.DfsUri">
            <summary>
            DFS Uri
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri">
            <summary>
            Gets the directory's primary <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> endpoint.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.ClientConfiguration">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.AccountName">
            <summary>
            Gets the Storage account name corresponding to the directory client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.FileSystemName">
            <summary>
            Gets the file system name name corresponding to the directory client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.Path">
            <summary>
            Gets the path corresponding to the path client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.CanGenerateSasUri">
            <summary>
            Determines whether the client is able to generate a SAS.
            If the client is authenticated with a <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.PathRestClient">
            <summary>
            <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.PathRestClient" /> pointed at the DFS endpoint.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakePathClient.BlobPathRestClient">
            <summary>
            <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.PathRestClient" /> pointed at the Blob endpoint.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.String,System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="path">
             The path to the file or directory.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.String,System.String,System.String,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information,
             <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">
             Configure Azure Storage connection strings</see>
             </param>
             <param name="fileSystemName">
             The name of the file system containing this path.
             </param>
             <param name="path">
             The path to the file or directory.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(Azure.Storage.Files.DataLake.DataLakeFileSystemClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <param name="fileSystemClient"><see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> of the path's File System.</param>
            <param name="path">The path to the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Core.Pipeline.ClientDiagnostics,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
             class.
            
             This will create an instance that uses the same diagnostics as another
             client. This client will be used within another API call of the parent
             client (namely Rename). This is in the case that the new child client
             has different credentials than the parent client.
             </summary>
             <param name="pathUri">
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the resource that includes the
             name of the account, the name of the file system, and the path to the
             resource.
             </param>
             <param name="diagnostics">
             The diagnostics from the parent client.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
             pipeline policies for authentication, retries, etc., that are
             applied to every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the path that includes the
            name of the account, the name of the file system, and the path to
            the resource.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the path that includes the
            name of the account, the name of the file system, and the path to
            the resource.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
            class.
            </summary>
            <param name="pathUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path to the
            resource.
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.WithCustomerProvidedKey(System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey})">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />
             class with an identical <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> source but the specified
             <paramref name="customerProvidedKey" />.
            
             </summary>
             <param name="customerProvidedKey">The customer provided key.</param>
             <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> instance.</returns>
             <remarks>
             Pass null to remove the customer provide key in the returned <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.BuildMetadataString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts metadata in DFS metadata string
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetNameFieldsIfNull">
            <summary>
            Sets the various name fields if they are currently null.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.Create(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.Create(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file or directory.
             If the path already exists, it will be overwritten.  If you don't intent to overwrite
             an existing path, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> operation creates a file or directory.
             If the path already exists, it will be overwritten.  If you don't intent to overwrite
             an existing path, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.Create(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.Create(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a file or directory.
             If the path already exists, it will be overwritten.  If you don't intent to overwrite
             an existing path, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
             operation creates a file or directory.
             If the path already exists, it will be overwritten.  If you don't intent to overwrite
             an existing path, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateInternal(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateInternal(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Boolean,System.Threading.CancellationToken)" />
             operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             Optional.  The owning group of the file or directory.
             </param>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="leaseId">
             Proposed LeaseId.
             </param>
             <param name="leaseDuration">
              Specifies the duration of the lease.
             </param>
             <param name="timeToExpire">
             Duration before file should be deleted.
             </param>
             <param name="expiresOn">
             The <see cref="T:System.DateTimeOffset" /> to set for when
             the file will be deleted.  If null, the existing
             ExpiresOn time on the file will be removed, if it exists.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
             <param name="async">
             Whether to invoke the operation asynchronously.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
             operation creates a file or directory.  If the file or directory already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
             operation creates a file or directory.  If the file or directory already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
             operation creates a file or directory.  If the file or directory already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
             operation creates a file or directory.  If the file or directory already exists, it is not changed.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="resourceType">
             Resource type of this path - file or directory.
             </param>
             <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
             <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
             <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.Exists(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.Exists(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> to see if the associated
            file or director exists in the file system.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the file or directory exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the file system if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
            <remarks>
            Note that if you call FileClient.Exists on a path that does not
            represent a file, Exists will return true. Similarly, if you
            call DirectoryClient.Exists on a path that is not a directory,
            Exists will return true.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.ExistsAsync(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" /> to see if the associated
            file or directory exists in the file system.
            </summary>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            Returns true if the file or directory exists.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the file system if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathResourceType,Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
            <remarks>
            Note that if you call FileClient.Exists on a path that does not
            represent a file, Exists will return true. Similarly, if you
            call DirectoryClient.Exists on a path that is not a directory,
            Exists will return true.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.Delete(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.Delete(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="recursive">
             Required and valid only when the resource is a directory. If "true", all paths beneath the directory will be deleted.
             If "false" and the directory is non-empty, an error occurs.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="recursive">
             Required and valid only when the resource is a directory. If "true", all paths beneath the directory will be deleted.
             If "false" and the directory is non-empty, an error occurs.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteIfExists(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteIfExists(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             for deletion, if the path exists. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="recursive">
             Required and valid only when the resource is a directory. If "true", all paths beneath the directory will be deleted.
             If "false" and the directory is non-empty, an error occurs.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteIfExistsAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.DeleteIfExistsAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion, if the path exists. The path is later deleted during
             garbage collection which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete">
             Delete Path</see>.
             </summary>
             <param name="recursive">
             Required and valid only when the resource is a directory. If "true", all paths beneath the directory will be deleted.
             If "false" and the directory is non-empty, an error occurs.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
             <param name="destinationPath">
             The destination path to rename the path to.
             </param>
             <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
             <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
             <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties">
             Get Properties</see>.
             </summary>
             <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.UpdateAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.UpdateAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation modifies the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.UpdateAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.UpdateAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation modifies the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.RemoveAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.RemoveAccessControlRecursive(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation removes the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.RemoveAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.RemoveAccessControlRecursiveAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem},System.String,Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions,System.Threading.CancellationToken)" /> operation removes the
             Access Control on a path and subpaths
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
             <param name="continuationToken">
             Optional continuation token that can be used to resume previously stopped operation.
             </param>
             <param name="options">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions" /> with additional controls.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> that contains summary stats of the operation.
             </returns>
             <remarks>
             A <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException" /> will be thrown if a request to
             storage throws a <see cref="T:Azure.RequestFailedException" /> or <see cref="T:System.Exception" />.
            
             Otherwise if a failure occurs outside the request, the respective <see cref="T:System.Exception" />
             type will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update">
             Update Path</see>.
             </summary>
             <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
             <param name="owner">
             The owner of the file or directory.
             </param>
             <param name="group">
             The owning group of the file or directory.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties">
             Get Properties</see>.
             </summary>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             paths's properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the path.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the paths's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the PATH.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties">
             Set Properties</see>.
             </summary>
             <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's HTTP headers.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
            For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata">
             Set Metadata</see>.
             </summary>
             <param name="metadata">
             Custom metadata to set for this path.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)" />
             returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> that generates a DataLake Path Service
             Shared Access Signature (SAS) Uri based on the Client properties and
             parameters passed. The SAS is signed by the shared key credential
             of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a service SAS</see>.
             </summary>
             <param name="permissions">
             Required. Specifies the list of permissions to be associated with the SAS.
             See <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" />.
             </param>
             <param name="expiresOn">
             Required. Specifies the time at which the SAS becomes invalid. This field
             must be omitted if it has been specified in an associated stored access policy.
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakePathClient.GenerateSasUri(Azure.Storage.Sas.DataLakeSasBuilder)" /> returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" />
             that generates a DataLake File Service Shared Access Signature (SAS) Uri
             based on the Client properties and and builder. The SAS is signed
             by the shared key credential of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.CanGenerateSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>.
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS).
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakePathClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetParentFileSystemClientCore">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />'s parent container.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakePathClient.GetParentDirectoryClientCore">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> that pointing to this <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />'s parent container.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            uses the same request policy pipeline as the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakePathClient" />.
            </summary>
            <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeSerializationExtensions">
            <summary>
            These extension methods are generated from swagger schema.
            Please use https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/template/Azure.Template
            to generate this code until new generator fully supports storage sdk.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeServiceClient">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" /> allows you to manipulate Azure
            Data Lake service resources and file systems. The storage account provides
            the top-level namespace for the Data Lake service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri">
            <summary>
            Gets the Data Lake service's primary <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> endpoint.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.ClientConfiguration">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.AccountName">
            <summary>
            Gets the Storage account name corresponding to the file service client.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.CanGenerateAccountSasUri">
            <summary>
            Determines whether the client is able to generate a SAS.
            If the client is authenticated with a <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">Configure Azure Storage connection strings</see>.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.String,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
             <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
             class.
             </summary>
             <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/azure/storage/common/storage-configure-connection-string">Configure Azure Storage connection strings</see>.
             </param>
             <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="credential">
            The shared key credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.AzureSasCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            Must not contain shared access signature, which should be passed in the second parameter.
            </param>
            <param name="credential">
            The shared access signature credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <remarks>
            This constructor should only be used when shared access signature needs to be updated during lifespan of this client.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="credential">
            The token credential used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />
            class.
            </summary>
            <param name="fileSystemUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the file system that includes the
            name of the account and the name of the file system.
            </param>
            <param name="clientConfiguration">
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientConfiguration" />.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Core.Pipeline.ClientDiagnostics,Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="clientDiagnostics"></param>
            <param name="storageSharedKeyCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.#ctor(System.Uri,Azure.Core.Pipeline.HttpPipelinePolicy,Azure.Storage.Files.DataLake.DataLakeClientOptions,Azure.Core.Pipeline.ClientDiagnostics,Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeServiceClient" />
            class.
            </summary>
            <param name="serviceUri">
            A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> referencing the Data Lake service.
            </param>
            <param name="authentication">
            An optional authentication policy used to sign requests.
            </param>
            <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
            <param name="clientDiagnostics"></param>
            <param name="sasCredential">
            The shared key credential used to sign requests.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystemClient(System.String)">
            <summary>
            Create a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> object by appending
            <paramref name="fileSystemName" /> to the end of <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" />.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> uses the same request
            policy pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" />.
            </summary>
            <param name="fileSystemName">
            The name of the share to reference.
            </param>
            <returns>
            A <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileSystemClient" /> for the desired share.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetUserDelegationKey(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetUserDelegationKey(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Threading.CancellationToken)" /> operation retrieves a
            key that can be used to delegate Active Directory authorization to
            shared access signatures created with <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            </summary>
            <param name="startsOn">
            Start time for the key's validity, with null indicating an
            immediate start.  The time should be specified in UTC.
            </param>
            <param name="expiresOn">
            Expiration of the key's validity.  The time should be specified
            in UTC.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing
            the use delegation key.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetUserDelegationKeyAsync(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetUserDelegationKeyAsync(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Threading.CancellationToken)" /> operation retrieves a
            key that can be used to delegate Active Directory authorization to
            shared access signatures created with <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            </summary>
            <param name="startsOn">
            Start time for the key's validity, with null indicating an
            immediate start.  The time should be specified in UTC.
            </param>
            <param name="expiresOn">
            Expiration of the key's validity.  The time should be specified
            in UTC.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> describing
            the use delegation key.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)" />
             operation returns an async sequence of file systems in the storage account.  Enumerating the
             file systems may make multiple requests to the service while fetching
             all the values.  File systems are ordered lexicographically by name.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-containers2">
             List Containers</see>.
             </summary>
             <param name="traits">
             Specifies trait options for shaping the file systems.
             </param>
             <param name="states">
             Specifies state options for shaping the file systems.
             </param>
             <param name="prefix">
             Specifies a string that filters the results to return only file systems
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Azure.Response`1" />
             describing the file systems in the storage account.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystemsAsync(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystemsAsync(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)" />
             operation returns an async sequence of file systems in the storage account.  Enumerating the
             files systems may make multiple requests to the service while fetching
             all the values.  File systems are ordered lexicographically by name.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-containers2">
             List Containers</see>.
             </summary>
             <param name="traits">
             Specifies trait options for shaping the file systems.
             </param>
             <param name="states">
             Specifies state options for shaping the file systems.
             </param>
             <param name="prefix">
             Specifies a string that filters the results to return only file systems
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             file systems in the storage account.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,System.String,System.Threading.CancellationToken)" />
             operation returns an async sequence of file systems in the storage account.
             Enumerating the file systems may make multiple requests to the service while fetching
             all the values.  File systems are ordered lexicographically by name.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-containers2">
             List Containers</see>.
             </summary>
             <param name="traits">
             Specifies trait options for shaping the file systems.
             </param>
             <param name="prefix">
             Specifies a string that filters the results to return only file systems
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Azure.Response`1" />
             describing the file systems in the storage account.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystemsAsync(Azure.Storage.Files.DataLake.Models.FileSystemTraits,System.String,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystemsAsync(Azure.Storage.Files.DataLake.Models.FileSystemTraits,System.String,System.Threading.CancellationToken)" />
             operation returns an async sequence of file systems in the storage account.
             Enumerating the files systems may make multiple requests to the service while fetching
             all the values.  File systems are ordered lexicographically by name.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/list-containers2">
             List Containers</see>.
             </summary>
             <param name="traits">
             Specifies trait options for shaping the file systems.
             </param>
             <param name="prefix">
             Specifies a string that filters the results to return only file systems
             whose name begins with the specified <paramref name="prefix" />.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             file systems in the storage account.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystem(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystem(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file systen with the
             same name already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> referencing the
             newly created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystemAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystem(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new
             file system under the specified account. If the file system with the
             same name already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to create.
             </param>
             <param name="options">
             Optional parameters.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> referencing the
             newly created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystem(System.String,Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystem(System.String,Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file systen with the
             same name already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to create.
             </param>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> referencing the
             newly created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystemAsync(System.String,Azure.Storage.Files.DataLake.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.CreateFileSystemAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions,System.Threading.CancellationToken)" />
             operation creates a new file system under the specified account. If the file system with the
             same name already exists, the operation fails.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-container">
             Create Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to create.
             </param>
             <param name="publicAccessType">
             Optionally specifies whether data in the file system may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
             specifies full public read access for file system and path data.
             Clients can enumerate paths within the file system via anonymous
             request, but cannot enumerate file systems within the storage
             account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
             read access for paths.  Path data within this file system can be
             read via anonymous request, but file system data is not available.
             Clients cannot enumerate paths within the file system via anonymous
             request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
             file system data is private to the account owner.
             </param>
             <param name="metadata">
             Optional custom metadata to set for this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> referencing the
             newly created file system.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.DeleteFileSystem(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.DeleteFileSystem(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the
             specified file system for deletion. The file system and any paths
             contained within it are later deleted during garbage collection
             which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.DeleteFileSystemAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.DeleteFileSystemAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the
             specified file system for deletion. The file system and any paths
             contained within it are later deleted during garbage collection
             which could take several minutes.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container">
             Delete Container</see>.
             </summary>
             <param name="fileSystemName">
             The name of the file system to delete.
             </param>
             <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the deletion of this file system.
             </param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> on successfully marking for deletion.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.UndeleteFileSystem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Restores a previously deleted file system.
            This API is only functional is Container Soft Delete is enabled
            for the storage account associated with the filesystem.
            </summary>
            <param name="deletedFileSystemName">
            The name of the previously deleted file system.
            </param>
            <param name="deleteFileSystemVersion">
            The version of the previously deleted file system.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> pointed at the undeleted file system.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.UndeleteFileSystemAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Restores a previously deleted file system.
            This API is only functional is Container Soft Delete is enabled
            for the storage account associated with the filesystem.
            </summary>
            <param name="deletedFileSystemName">
            The name of the previously deleted file system.
            </param>
            <param name="deleteFileSystemVersion">
            The version of the previously deleted file system.
            </param>
            <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
            <returns>
            A <see cref="T:Azure.Response`1" /> pointed at the undeleted file system.
            </returns>
            <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasPermissions,System.DateTimeOffset,Azure.Storage.Sas.AccountSasResourceTypes)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasPermissions,System.DateTimeOffset,Azure.Storage.Sas.AccountSasResourceTypes)" />
             returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> that generates a DataLake Account
             Shared Access Signature (SAS) based on the Client properties
             and parameters passed. The SAS is signed by the
             shared key credential of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.CanGenerateAccountSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas">
             Constructing an Account SAS</see>.
             </summary>
             <param name="permissions">
             Specifies the list of permissions that can be set in the SasBuilder
             See <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" />.
             </param>
             <param name="expiresOn">
             Specifies when to set the expires time in the sas builder.
             </param>
             <param name="resourceTypes">
             Specifies the resource types associated with the shared access signature.
             The user is restricted to operations on the specified resources.
             See <see cref="T:Azure.Storage.Sas.AccountSasResourceTypes" />.
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasBuilder)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GenerateAccountSasUri(Azure.Storage.Sas.AccountSasBuilder)" /> returns a <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" />
             that generates a DataLake Account Shared Access Signature (SAS)
             based on the Client properties and builder passed.
             The SAS is signed by the shared key credential of the client.
            
             To check if the client is able to sign a Service Sas see
             <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.CanGenerateAccountSasUri" />.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas">
             Constructing an Account SAS</see>.
             </summary>
             <param name="builder">
             Used to generate a Shared Access Signature (SAS).
             </param>
             <returns>
             A <see cref="P:Azure.Storage.Files.DataLake.DataLakeServiceClient.Uri" /> containing the SAS Uri.
             </returns>
             <remarks>
             A <see cref="T:System.Exception" /> will be thrown if a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetProperties(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetProperties(System.Threading.CancellationToken)" /> operation gets the properties
             of a storage account’s Data Lake service, including properties for
             Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties">
             Get Blob Service Properties</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the service properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetPropertiesAsync(System.Threading.CancellationToken)" /> operation gets the properties
             of a storage account’s Data Lake service, including properties for
             Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties">
             Get Blob Service Properties</see>.
             </summary>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the service properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.SetProperties(Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.SetProperties(Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties,System.Threading.CancellationToken)" /> operation sets properties for
             a storage account’s Data Lake service endpoint, including properties
             for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules
             and soft delete settings.  You can also use this operation to set
             the default request version for all incoming requests to the Blob
             service that do not have a version specified.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties">
             Set Blob Service Properties</see>.
             </summary>
             <param name="properties">The Data Lake service properties.</param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing
             the service properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.SetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties,System.Threading.CancellationToken)">
             <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.SetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties,System.Threading.CancellationToken)" /> operation sets properties for
             a storage account’s Data Lake service endpoint, including properties
             for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules
             and soft delete settings.  You can also use this operation to set
             the default request version for all incoming requests to the Blob
             service that do not have a version specified.
            
             For more information, see
             <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-service-properties">
             Set Blob Service Properties</see>.
             </summary>
             <param name="properties">The Data Lake service properties.</param>
             <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
             <returns>
             A <see cref="T:Azure.Response" /> describing
             the service properties.
             </returns>
             <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder" /> class provides a convenient way to
            modify the contents of a <see cref="T:System.Uri" /> instance to point to
            different Azure Data Lake resources like an file system, directory, or file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Scheme">
            <summary>
            Gets or sets the scheme name of the URI.
            Example: "https"
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Host">
             <summary>
             Gets or sets the Domain Name System (DNS) host name or IP address
             of a server.
            
             Example: "account.file.core.windows.net"
             </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Port">
            <summary>
            Gets or sets the port number of the URI.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.AccountName">
            <summary>
            Gets or sets the Azure Storage account name.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.FileSystemName">
             <summary>
             Gets or sets the name of a file storage share.  The value defaults
             to <see cref="F:System.String.Empty" /> if not present in the
             <see cref="T:System.Uri" />.
            
             </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.DirectoryOrFilePath">
            <summary>
            Gets or sets the path of the directory or file.  The value defaults
            to <see cref="F:System.String.Empty" /> if not present in the
            <see cref="T:System.Uri" />.
            Example: "mydirectory/myfile"
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Snapshot">
            <summary>
            Gets or sets the name of a file snapshot.  The value defaults to
            <see cref="F:System.String.Empty" /> if not present in the <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Sas">
            <summary>
            Gets or sets the Shared Access Signature query parameters, or null
            if not present in the <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.LastDirectoryOrFileName">
            <summary>
            Get the last directory or file name from the <see cref="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.DirectoryOrFilePath" />, or null if
            not present in the <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.DataLakeUriBuilder.Query">
            <summary>
            Gets or sets any query information included in the URI that's not
            relevant to addressing Azure storage resources.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeUriBuilder.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder" />
            class with the specified <see cref="T:System.Uri" />.
            </summary>
            <param name="uri">
            The <see cref="T:System.Uri" /> to a storage resource.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeUriBuilder.ToUri">
            <summary>
            Returns the <see cref="T:System.Uri" /> constructed from the
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder" />'s fields. The <see cref="P:System.Uri.Query" />
            property contains the SAS and additional query parameters.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeUriBuilder.ToBlobUri">
            <summary>
            Gets the blob Uri.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeUriBuilder.ToDfsUri">
            <summary>
            Gets the dfs Uri.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.DataLakeUriBuilder.ToString">
            <summary>
            Returns the display string for the specified
            <see cref="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder" /> instance.
            </summary>
            <returns>
            The display string for the specified <see cref="T:Azure.Storage.Files.DataLake.DataLakeUriBuilder" />
            instance.
            </returns>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemCreateHeaders.LastModified">
            <summary> The data and time the filesystem was last modified.  Operations on files and directories do not affect the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemCreateHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemCreateHeaders.NamespaceEnabled">
            <summary> A bool string indicates whether the namespace feature is enabled. If "true", the namespace is enabled for the filesystem. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemDeleteHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemGetPropertiesHeaders.LastModified">
            <summary> The data and time the filesystem was last modified.  Changes to filesystem properties update the last modified time, but operations on files and directories do not. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemGetPropertiesHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemGetPropertiesHeaders.Properties">
            <summary> The user-defined properties associated with the filesystem.  A comma-separated list of name and value pairs in the format "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemGetPropertiesHeaders.NamespaceEnabled">
            <summary> A bool string indicates whether the namespace feature is enabled. If "true", the namespace is enabled for the filesystem. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemListBlobHierarchySegmentHeaders.ContentType">
            <summary> The media type of the body of the response. For List Blobs this is 'application/xml'. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemListBlobHierarchySegmentHeaders.Version">
            <summary> Indicates the version of the Blob service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemListPathsHeaders.LastModified">
            <summary> The data and time the filesystem was last modified.  Changes to filesystem properties update the last modified time, but operations on files and directories do not. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemListPathsHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemListPathsHeaders.Continuation">
            <summary> If the number of paths to be listed exceeds the maxResults limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the paths. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String,System.String)">
            <summary> Initializes a new instance of FileSystemRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, container, or blob that is the target of the desired operation. </param>
            <param name="resource"> The value must be "filesystem" for all filesystem operations. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" />, <paramref name="resource" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.CreateAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Create FileSystem. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create a FileSystem rooted at the specified location. If the FileSystem already exists, the operation fails.  This operation does not support conditional HTTP requests. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.Create(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Create FileSystem. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create a FileSystem rooted at the specified location. If the FileSystem already exists, the operation fails.  This operation does not support conditional HTTP requests. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.SetPropertiesAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Set FileSystem Properties. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Set properties for the FileSystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.SetProperties(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Set FileSystem Properties. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Set properties for the FileSystem.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.GetPropertiesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get FileSystem Properties. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> All system and user-defined filesystem properties are specified in the response headers. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.GetProperties(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Get FileSystem Properties. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> All system and user-defined filesystem properties are specified in the response headers. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.DeleteAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Delete FileSystem. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Marks the FileSystem for deletion.  When a FileSystem is deleted, a FileSystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.Delete(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Delete FileSystem. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Marks the FileSystem for deletion.  When a FileSystem is deleted, a FileSystem with the same identifier cannot be created for at least 30 seconds. While the filesystem is being deleted, attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict), with the service returning additional error information indicating that the filesystem is being deleted. All other operations, including operations on any files or directories within the filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListPathsAsync(System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> List Paths. </summary>
            <param name="recursive"> Required. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="path"> Optional.  Filters results to paths within the specified directory. An error occurs if the directory does not exist. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="upn"> Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If "false", the values will be returned as Azure Active Directory Object IDs. The default value is false. Note that group and application Object IDs are not translated because they do not have unique friendly names. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> List FileSystem paths and their properties. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListPaths(System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> List Paths. </summary>
            <param name="recursive"> Required. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="path"> Optional.  Filters results to paths within the specified directory. An error occurs if the directory does not exist. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="upn"> Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If "false", the values will be returned as Azure Active Directory Object IDs. The default value is false. Note that group and application Object IDs are not translated because they do not have unique friendly names. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> List FileSystem paths and their properties. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListBlobHierarchySegmentAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Blobs operation returns a list of the blobs under the specified container. </summary>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="delimiter"> When the request includes this parameter, the operation returns a BlobPrefix element in the response body that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string. </param>
            <param name="marker"> A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="include"> Include this parameter to specify one or more datasets to include in the response. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListBlobHierarchySegment(System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Blobs operation returns a list of the blobs under the specified container. </summary>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="delimiter"> When the request includes this parameter, the operation returns a BlobPrefix element in the response body that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string. </param>
            <param name="marker"> A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="include"> Include this parameter to specify one or more datasets to include in the response. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListBlobHierarchySegmentNextPageAsync(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Blobs operation returns a list of the blobs under the specified container. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="delimiter"> When the request includes this parameter, the operation returns a BlobPrefix element in the response body that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string. </param>
            <param name="marker"> A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="include"> Include this parameter to specify one or more datasets to include in the response. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.FileSystemRestClient.ListBlobHierarchySegmentNextPage(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> The List Blobs operation returns a list of the blobs under the specified container. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="delimiter"> When the request includes this parameter, the operation returns a BlobPrefix element in the response body that acts as a placeholder for all blobs whose names begin with the same substring up to the appearance of the delimiter character. The delimiter may be a single character or a string. </param>
            <param name="marker"> A string value that identifies the portion of the list of containers to be returned with the next listing operation. The operation returns the NextMarker value within the response body if the listing operation did not return all containers remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in a subsequent call to request the next page of list items. The marker value is opaque to the client. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="include"> Include this parameter to specify one or more datasets to include in the response. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemSetPropertiesHeaders.LastModified">
            <summary> The data and time the filesystem was last modified.  Changes to filesystem properties update the last modified time, but operations on files and directories do not. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.FileSystemSetPropertiesHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AclFailedEntry">
            <summary> The AclFailedEntry. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.AclFailedEntry.#ctor">
            <summary> Initializes a new instance of AclFailedEntry. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.AclFailedEntry.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of AclFailedEntry. </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment">
            <summary> The BlobHierarchyListSegment. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment.#ctor(System.Collections.Generic.IEnumerable{Azure.Storage.Files.DataLake.Models.BlobItemInternal})">
            <summary> Initializes a new instance of BlobHierarchyListSegment. </summary>
            <param name="blobItems"></param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="blobItems" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Storage.Files.DataLake.Models.BlobPrefix},System.Collections.Generic.IReadOnlyList{Azure.Storage.Files.DataLake.Models.BlobItemInternal})">
            <summary> Initializes a new instance of BlobHierarchyListSegment. </summary>
            <param name="blobPrefixes"></param>
            <param name="blobItems"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment.BlobPrefixes">
            <summary> Gets the blob prefixes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment.BlobItems">
            <summary> Gets the blob items. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.BlobItemInternal">
            <summary> An Azure Storage blob. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobItemInternal.#ctor(System.String,System.Boolean,System.String,Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal)">
            <summary> Initializes a new instance of BlobItemInternal. </summary>
            <param name="name"></param>
            <param name="deleted"></param>
            <param name="snapshot"></param>
            <param name="properties"> Properties of a blob. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" />, <paramref name="snapshot" /> or <paramref name="properties" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobItemInternal.#ctor(System.String,System.Boolean,System.String,System.String,System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal,System.String)">
            <summary> Initializes a new instance of BlobItemInternal. </summary>
            <param name="name"></param>
            <param name="deleted"></param>
            <param name="snapshot"></param>
            <param name="versionId"></param>
            <param name="isCurrentVersion"></param>
            <param name="properties"> Properties of a blob. </param>
            <param name="deletionId"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.Name">
            <summary> Gets the name. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.Deleted">
            <summary> Gets the deleted. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.Snapshot">
            <summary> Gets the snapshot. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.VersionId">
            <summary> Gets the version id. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.IsCurrentVersion">
            <summary> Gets the is current version. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.Properties">
            <summary> Properties of a blob. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobItemInternal.DeletionId">
            <summary> Gets the deletion id. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.BlobPrefix">
            <summary> The BlobPrefix. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobPrefix.#ctor(System.String)">
            <summary> Initializes a new instance of BlobPrefix. </summary>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPrefix.Name">
            <summary> Gets the name. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal">
            <summary> Properties of a blob. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.#ctor(System.DateTimeOffset,System.String)">
            <summary> Initializes a new instance of BlobPropertiesInternal. </summary>
            <param name="lastModified"></param>
            <param name="etag"></param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="etag" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.#ctor(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Byte[],System.String,System.String,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of BlobPropertiesInternal. </summary>
            <param name="creationTime"></param>
            <param name="lastModified"></param>
            <param name="etag"></param>
            <param name="contentLength"> Size in bytes. </param>
            <param name="contentType"></param>
            <param name="contentEncoding"></param>
            <param name="contentLanguage"></param>
            <param name="contentMD5"></param>
            <param name="contentDisposition"></param>
            <param name="cacheControl"></param>
            <param name="blobSequenceNumber"></param>
            <param name="copyId"></param>
            <param name="copySource"></param>
            <param name="copyProgress"></param>
            <param name="copyCompletionTime"></param>
            <param name="copyStatusDescription"></param>
            <param name="serverEncrypted"></param>
            <param name="incrementalCopy"></param>
            <param name="destinationSnapshot"></param>
            <param name="deletedTime"></param>
            <param name="remainingRetentionDays"></param>
            <param name="accessTierInferred"></param>
            <param name="customerProvidedKeySha256"></param>
            <param name="encryptionScope"> The name of the encryption scope under which the blob is encrypted. </param>
            <param name="accessTierChangeTime"></param>
            <param name="tagCount"></param>
            <param name="expiresOn"></param>
            <param name="isSealed"></param>
            <param name="lastAccessedOn"></param>
            <param name="deleteTime"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CreationTime">
            <summary> Gets the creation time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.LastModified">
            <summary> Gets the last modified. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.Etag">
            <summary> Gets the etag. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentLength">
            <summary> Size in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentType">
            <summary> Gets the content type. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentEncoding">
            <summary> Gets the content encoding. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentLanguage">
            <summary> Gets the content language. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentMD5">
            <summary> Gets the content md 5. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ContentDisposition">
            <summary> Gets the content disposition. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CacheControl">
            <summary> Gets the cache control. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.BlobSequenceNumber">
            <summary> Gets the blob sequence number. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CopyId">
            <summary> Gets the copy id. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CopySource">
            <summary> Gets the copy source. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CopyProgress">
            <summary> Gets the copy progress. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CopyCompletionTime">
            <summary> Gets the copy completion time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CopyStatusDescription">
            <summary> Gets the copy status description. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ServerEncrypted">
            <summary> Gets the server encrypted. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.IncrementalCopy">
            <summary> Gets the incremental copy. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.DestinationSnapshot">
            <summary> Gets the destination snapshot. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.DeletedTime">
            <summary> Gets the deleted time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.RemainingRetentionDays">
            <summary> Gets the remaining retention days. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.AccessTierInferred">
            <summary> Gets the access tier inferred. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.CustomerProvidedKeySha256">
            <summary> Gets the customer provided key sha 256. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.EncryptionScope">
            <summary> The name of the encryption scope under which the blob is encrypted. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.AccessTierChangeTime">
            <summary> Gets the access tier change time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.TagCount">
            <summary> Gets the tag count. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.ExpiresOn">
            <summary> Gets the expires on. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.IsSealed">
            <summary> Gets the is sealed. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.LastAccessedOn">
            <summary> Gets the last accessed on. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.BlobPropertiesInternal.DeleteTime">
            <summary> Gets the delete time. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystem">
            <summary> The FileSystem. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystem.#ctor">
            <summary> Initializes a new instance of FileSystem. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystem.#ctor(System.String,System.String,System.String)">
            <summary> Initializes a new instance of FileSystem. </summary>
            <param name="name"></param>
            <param name="lastModified"></param>
            <param name="eTag"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystem.Name">
            <summary> Gets the name. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystem.LastModified">
            <summary> Gets the last modified. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystem.ETag">
            <summary> Gets the e tag. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemList">
            <summary> The FileSystemList. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemList.#ctor">
            <summary> Initializes a new instance of FileSystemList. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemList.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Storage.Files.DataLake.Models.FileSystem})">
            <summary> Initializes a new instance of FileSystemList. </summary>
            <param name="filesystems"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemList.Filesystems">
            <summary> Gets the filesystems. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse">
            <summary> An enumeration of blobs. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.#ctor(System.String,System.String,Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment)">
            <summary> Initializes a new instance of ListBlobsHierarchySegmentResponse. </summary>
            <param name="serviceEndpoint"></param>
            <param name="containerName"></param>
            <param name="segment"></param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="serviceEndpoint" />, <paramref name="containerName" /> or <paramref name="segment" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.#ctor(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,Azure.Storage.Files.DataLake.Models.BlobHierarchyListSegment,System.String)">
            <summary> Initializes a new instance of ListBlobsHierarchySegmentResponse. </summary>
            <param name="serviceEndpoint"></param>
            <param name="containerName"></param>
            <param name="prefix"></param>
            <param name="marker"></param>
            <param name="maxResults"></param>
            <param name="delimiter"></param>
            <param name="segment"></param>
            <param name="nextMarker"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.ServiceEndpoint">
            <summary> Gets the service endpoint. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.ContainerName">
            <summary> Gets the container name. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.Prefix">
            <summary> Gets the prefix. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.Marker">
            <summary> Gets the marker. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.MaxResults">
            <summary> Gets the max results. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.Delimiter">
            <summary> Gets the delimiter. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.Segment">
            <summary> Gets the segment. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ListBlobsHierarchySegmentResponse.NextMarker">
            <summary> Gets the next marker. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.Path">
            <summary> The Path. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.Path.#ctor">
            <summary> Initializes a new instance of Path. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.Path.#ctor(System.String,System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary> Initializes a new instance of Path. </summary>
            <param name="name"></param>
            <param name="lastModified"></param>
            <param name="owner"></param>
            <param name="group"></param>
            <param name="permissions"></param>
            <param name="encryptionScope"> The name of the encryption scope under which the blob is encrypted. </param>
            <param name="creationTime"></param>
            <param name="expiryTime"></param>
            <param name="contentLength"></param>
            <param name="isDirectory"></param>
            <param name="etag"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.Name">
            <summary> Gets the name. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.LastModified">
            <summary> Gets the last modified. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.Owner">
            <summary> Gets the owner. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.Group">
            <summary> Gets the group. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.Permissions">
            <summary> Gets the permissions. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.EncryptionScope">
            <summary> The name of the encryption scope under which the blob is encrypted. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.CreationTime">
            <summary> Gets the creation time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.ExpiryTime">
            <summary> Gets the expiry time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.ContentLength">
            <summary> Gets the content length. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.IsDirectory">
            <summary> Gets the is directory. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.Path.Etag">
            <summary> Gets the etag. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathExpiryOptions">
            <summary> The PathExpiryOptions. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Storage.Files.DataLake.Models.PathExpiryOptions" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.NeverExpire">
            <summary> NeverExpire. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.RelativeToCreation">
            <summary> RelativeToCreation. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.RelativeToNow">
            <summary> RelativeToNow. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.Absolute">
            <summary> Absolute. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.op_Equality(Azure.Storage.Files.DataLake.Models.PathExpiryOptions,Azure.Storage.Files.DataLake.Models.PathExpiryOptions)">
            <summary> Determines if two <see cref="T:Azure.Storage.Files.DataLake.Models.PathExpiryOptions" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.op_Inequality(Azure.Storage.Files.DataLake.Models.PathExpiryOptions,Azure.Storage.Files.DataLake.Models.PathExpiryOptions)">
            <summary> Determines if two <see cref="T:Azure.Storage.Files.DataLake.Models.PathExpiryOptions" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.op_Implicit(System.String)~Azure.Storage.Files.DataLake.Models.PathExpiryOptions">
            <summary> Converts a string to a <see cref="T:Azure.Storage.Files.DataLake.Models.PathExpiryOptions" />. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.Equals(Azure.Storage.Files.DataLake.Models.PathExpiryOptions)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathExpiryOptions.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathGetPropertiesAction">
            <summary> The PathGetPropertiesAction. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathGetPropertiesAction.GetAccessControl">
            <summary> getAccessControl. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathGetPropertiesAction.GetStatus">
            <summary> getStatus. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathLeaseAction">
            <summary> The PathLeaseAction. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathLeaseAction.Acquire">
            <summary> acquire. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathLeaseAction.Break">
            <summary> break. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathLeaseAction.Change">
            <summary> change. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathLeaseAction.Renew">
            <summary> renew. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathLeaseAction.Release">
            <summary> release. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathList">
            <summary> The PathList. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathList.#ctor">
            <summary> Initializes a new instance of PathList. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathList.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Storage.Files.DataLake.Models.Path})">
            <summary> Initializes a new instance of PathList. </summary>
            <param name="paths"></param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathList.Paths">
            <summary> Gets the paths. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathRenameMode">
            <summary> The PathRenameMode. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathRenameMode.Legacy">
            <summary> legacy. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathRenameMode.Posix">
            <summary> posix. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathResourceType">
            <summary> The PathResourceType. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathResourceType.Directory">
            <summary> directory. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathResourceType.File">
            <summary> file. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathUpdateAction">
            <summary> The PathUpdateAction. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathUpdateAction.Append">
            <summary> append. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathUpdateAction.Flush">
            <summary> flush. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathUpdateAction.SetProperties">
            <summary> setProperties. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathUpdateAction.SetAccessControl">
            <summary> setAccessControl. </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathUpdateAction.SetAccessControlRecursive">
            <summary> setAccessControlRecursive. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.SetAccessControlRecursiveResponse">
            <summary> The SetAccessControlRecursiveResponse. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.SetAccessControlRecursiveResponse.#ctor">
            <summary> Initializes a new instance of SetAccessControlRecursiveResponse. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.SetAccessControlRecursiveResponse.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyList{Azure.Storage.Files.DataLake.Models.AclFailedEntry})">
            <summary> Initializes a new instance of SetAccessControlRecursiveResponse. </summary>
            <param name="directoriesSuccessful"></param>
            <param name="filesSuccessful"></param>
            <param name="failureCount"></param>
            <param name="failedEntries"></param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.StorageError">
            <summary> The StorageError. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.StorageError.#ctor">
            <summary> Initializes a new instance of StorageError. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.StorageError.#ctor(Azure.Storage.Files.DataLake.Models.StorageErrorError)">
            <summary> Initializes a new instance of StorageError. </summary>
            <param name="error"> The service error response object. </param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.StorageError.Error">
            <summary> The service error response object. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.StorageErrorError">
            <summary> The service error response object. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.StorageErrorError.#ctor">
            <summary> Initializes a new instance of StorageErrorError. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.StorageErrorError.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of StorageErrorError. </summary>
            <param name="code"> The service error code. </param>
            <param name="message"> The service error message. </param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.StorageErrorError.Code">
            <summary> The service error code. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.StorageErrorError.Message">
            <summary> The service error message. </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters">
            <summary>
            AccessControlChangeCounters contains counts of operations that change Access Control Lists recursively.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters.ChangedDirectoriesCount">
            <summary>
            Returns number of directories where Access Control List has been updated successfully.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters.ChangedFilesCount">
            <summary>
            Returns number of files where Access Control List has been updated successfully.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters.FailedChangesCount">
            <summary>
            Returns number of paths where Access Control List update has failed.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeFailure">
            <summary>
            Represents an entry that failed to update Access Control List.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeFailure.Name">
            <summary>
            Returns name of an entry.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeFailure.IsDirectory">
            <summary>
            Returns whether entry is a directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeFailure.ErrorMessage">
            <summary>
            Returns error message that is the reason why entry failed to update.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions">
            <summary>
            AccessControlChangeOptions contain knobs used to customize recursive Access Control operations.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions.BatchSize">
            <summary>
            Optional. If data set size exceeds batch size then operation will be split into multiple requests so that progress can be tracked.
            Batch size should be between 1 and 2000. The default when unspecified is 2000.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions.MaxBatches">
            <summary>
            Optional. Defines maximum number of batches that single change Access Control operation can execute.
            If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.
            Empty value indicates that maximum number of batches in unbound and operation continues till end.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions.ContinueOnFailure">
            <summary>
            Optional. If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will ignore
            user failures and proceed with the operation on other sub-entities of the directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeOptions.ProgressHandler">
            <summary>
            Optional. <see cref="T:System.Progress`1" /> callback where caller can track progress of the operation
            as well as collect paths that failed to change Access Control.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeResult">
            <summary>
            AccessControlChangeResult contains result of operations that change Access Control Lists recursively.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeResult.Counters">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters" /> that contains counts of paths changed from start of the operation.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeResult.ContinuationToken">
            <summary>
            Optional continuation token. Value is present when operation is split into multiple batches and can be used to resume progress.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChangeResult.BatchFailures">
            <summary>
            Optional the First Batch Failures.
            An enumerable of path entries that failed to update Access Control List within the first single batch.
            If no failures occured, this will be set to null.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlChanges">
            <summary>
            AccessControlChanges contains batch and cumulative counts of operations that change Access Control Lists recursively.
            Additionally it exposes path entries that failed to update while these operations progress.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChanges.BatchFailures">
            <summary>
            An enumerable of path entries that failed to update Access Control List within single batch.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChanges.BatchCounters">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters" /> that contains counts of paths changed within single batch.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChanges.AggregateCounters">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.Models.AccessControlChangeCounters" /> that contains counts of paths changed from start of the operation.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.AccessControlChanges.ContinuationToken">
            <summary>
            Optional continuation token. Value is present when operation is split into multiple batches and can be used to resume progress.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.AccessControlType">
            <summary>
            Specifies the type of the <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.AccessControlType.Other">
            <summary>
            Specifies the <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" /> applies to all users not found in other entries.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.AccessControlType.User">
            <summary>
            Specifies the <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" /> applies to the owner or a named user.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.AccessControlType.Group">
            <summary>
            Specifies the <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" /> applies to the owning group or a named group.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.AccessControlType.Mask">
            <summary>
            Specifies the <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" /> sets a mask that restricts access to named users and member of groups.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.CopyStatus">
            <summary>
            CopyStatus values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.CopyStatus.Pending">
            <summary>
            pending
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.CopyStatus.Success">
            <summary>
            success
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.CopyStatus.Aborted">
            <summary>
            aborted
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.CopyStatus.Failed">
            <summary>
            failed
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions">
            <summary>
            Access options to set when creating a path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions.Permissions">
            <summary>
            Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
            permissions for the file owner, the file owning group, and others. Each class may be granted read,
            write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
            octal notation (e.g. 0766) are supported.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions.Umask">
            <summary>
            Optional and only valid if Hierarchical Namespace is enabled for the account.
            When creating a file or directory and the parent folder does not have a default ACL,
            the umask restricts the permissions of the file or directory to be created. The resulting
            permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
            if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
            0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
            in 4-digit octal notation (e.g. 0766).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions.Owner">
            <summary>
            Optional.  The owner of the file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions.Group">
            <summary>
            Optional.  The owning group of the file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessOptions.AccessControlList">
            <summary>
            Optional.  The POSIX access control list for the file or directory.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy">
            <summary>
            An Access policy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.PolicyStartsOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> the policy becomes active.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.PolicyExpiresOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> the policy expires.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.StartsOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> the policy becomes active.
            This value is non-nullable, please use <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.PolicyStartsOn" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.ExpiresOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> the policy expires.
            This value is non-nullable, please use <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.PolicyExpiresOn" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy.Permissions">
            <summary>
            The file permissions for the policy.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException">
            <summary>
            An exception thrown when an operation is interrupted and can be continued later on.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException.ContinuationToken">
            <summary>
            Gets the continuation token from the last successful response from the service.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException.#ctor(System.String,System.Exception,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException"></see> class with a specified error message, HTTP status code, error code, and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="exception">The exception thrown from the failed request.</param>
            <param name="continuationToken">The continuation token returned from the previous successful response.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException.#ctor(System.String,Azure.RequestFailedException,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException"></see> class with a specified error message, HTTP status code, error code, and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The message that describes the error.</param>
            <param name="exception">The exception thrown from the failed request.</param>
            <param name="continuationToken">The continuation token returned from the previous successful response.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException"><paramref name="info" /> is <see langword="null" />.</exception><exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeAclChangeFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param><exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging">
            <summary>
            Azure Analytics Logging settings.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging.Version">
            <summary>
            The version of Storage Analytics to configure.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging.Delete">
            <summary>
            Indicates whether all delete requests should be logged.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging.Read">
            <summary>
            Indicates whether all read requests should be logged.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging.Write">
            <summary>
            Indicates whether all write requests should be logged.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeAnalyticsLogging.RetentionPolicy">
            <summary>
            The retention policy which determines how long the associated data should persist.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule">
            <summary>
            CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain.
            Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain;
            CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule.AllowedOrigins">
            <summary>
            The origin domains that are permitted to make a request against the storage service via CORS.
            The origin domain is the domain from which the request originates. Note that the origin must be an exact
            case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*'
            to allow all origin domains to make requests via CORS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule.AllowedMethods">
            <summary>
            The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule.AllowedHeaders">
            <summary>
            the request headers that the origin domain may specify on the CORS request.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule.ExposedHeaders">
            <summary>
            The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCorsRule.MaxAgeInSeconds">
            <summary>
            The maximum amount time that a browser should cache the preflight OPTIONS request.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey">
            <summary>
            Wrapper for an encryption key to be used with client provided key server-side encryption.
            Note that encryption is applied is applied on a per-file basis.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.EncryptionKey">
            <summary>
            Base64 encoded string of the AES256 encryption key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.EncryptionKeyHash">
            <summary>
            Base64 encoded string of the AES256 encryption key's SHA256 hash.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.EncryptionAlgorithm">
            <summary>
            The algorithm for Azure Blob Storage to encrypt with.
            Azure Blob Storage only offers AES256 encryption.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.#ctor(System.String)">
            <summary>
            Creates a new CustomerProvidedKey for use in server-side encryption.
            </summary>
            <param name="key">The encryption key encoded as a base64 string.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.#ctor(System.Byte[])">
            <summary>
            Creates a new CustomerProvidedKey for use in server-side encryption.
            </summary>
            <param name="key">The encryption key bytes.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.Equals(System.Object)">
            <summary>
            Checks if two CustomerProvidedKeyInfo are equal to each other.
            </summary>
            <param name="obj">The other instance to compare to.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.GetHashCode">
            <summary>
            Get a hash code for the CustomerProvidedKeyInfo.
            </summary>
            <returns>Hash code for the CustomerProvidedKeyInfo.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.op_Equality(Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey,Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey)">
            <summary>
            Check if two CustomerProvidedKeyInfo instances are equal.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.op_Inequality(Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey,Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey)">
            <summary>
            Check if two CustomerProvidedKeyInfo instances are not equal.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if they're not equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.Equals(Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey)">
            <summary>
            Checks if two CustomerProvidedKeyInfo are equal to each other.
            </summary>
            <param name="other">The other instance to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeCustomerProvidedKey.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeEncryptionAlgorithmType">
            <summary>
            The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256".
            Must be provided if the x-ms-encryption-key header is provided.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeEncryptionAlgorithmType.Aes256">
            <summary>
            AES256
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions">
            <summary>
            Optional parameters for appending data to a file with DataLakeFileClient.Append() and .AppendAsync().
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions.LeaseId">
            <summary>
            Optional lease ID for accessing this blob.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions.ProgressHandler">
            <summary>
            Optional <see cref="T:System.IProgress`1" /> to provide
            progress updates about data transfers.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions.ContentHash">
            <summary>
            This hash is used to verify the integrity of the request content during transport. When this header is specified,
            the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match,
            the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is
            associated with the request content, and not with the stored content of the file itself.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileAppendOptions.Flush">
            <summary>
            Optional.  If true, the file will be flushed after the append.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileExpirationOrigin">
            <summary>
            Enum to specify when a file's ExpiriesOn time should be relative
            to.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeFileExpirationOrigin.CreationTime">
            <summary>
            Files's ExpiriesOn property should be set relative to
            the file CreatedOn time.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeFileExpirationOrigin.Now">
            <summary>
            Files's ExpiriesOn property should be set relative to
            the current time.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions">
            <summary>
            Optional parameters for File Open Write.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions.BufferSize">
            <summary>
            The size of the buffer to use.  Default is 4 MB,
            max is 4000 MB.  See <see cref="P:Azure.Storage.Files.DataLake.DataLakeFileClient.MaxUploadLongBytes" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions.OpenConditions">
            <summary>
            Access conditions used to open the write stream.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions.ProgressHandler">
            <summary>
            Optional <see cref="T:System.IProgress`1" /> to provide
            progress updates about data transfers.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions.Close">
            <summary>
            Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled,
            a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the
            difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter
            is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the
            flush operation completes successfully, the service raises a file change notification with a property indicating that
            this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the
            file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that
            the file stream has been closed.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileOpenWriteOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions">
            <summary>
            Optional parameters for downloading a range of a file with
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.Read(Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions.Range">
            <summary>
            If provided, only download the bytes of the blob in the specified
            range.  If not provided, download the entire file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions.Conditions">
            <summary>
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            downloading this file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions">
            <summary>
            Options for reading a file to a destination.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions.Conditions">
            <summary>
            Request conditions for downloading.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions.TransferOptions">
            <summary>
            Transfer options for managing individual read requests.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileReadToOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions">
            <summary>
            Parameters for Schedule Deletion.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.TimeToExpire">
            <summary>
            Duration before file should be deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.SetExpiryRelativeTo">
            <summary>
            Specifies if TimeToExpire should be
            set relative to the file's creation time, or the current
            time.  Defaults to current time.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.ExpiresOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> to set for when
            the file will be deleted.  If null, the existing
            ExpiresOn time on the file will be removed, if it exists.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.#ctor(System.Nullable{System.DateTimeOffset})">
            <summary>
            Constructor.  Sets the <see cref="T:System.DateTimeOffset" /> when the file will
            be deleted.
            </summary>
            <param name="expiresOn">
            The DateTimeOffset when the file will be deleted.
            If null, if the file was already scheduled for deletion,
            the deletion will be cancelled.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.#ctor(System.TimeSpan,Azure.Storage.Files.DataLake.Models.DataLakeFileExpirationOrigin)">
            <summary>
            Constructor.  Sets time when the file will be deleted, relative to the file
            creation time or the current time.
            </summary>
            <param name="timeToExpire">
            Duration before file will be deleted.
            </param>
            <param name="setRelativeTo">
            Specifies if TimeToExpire should be
            set relative to the file's creation time, or the current
            time.  Defaults to current time.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeFileScheduleDeletionOptions.#ctor">
            <summary>
            Constructor.  If the file was scheduled for deletetion, the deletion will be cancelled.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions">
            <summary>
            Optional parameters for creating a File System.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions.PublicAccessType">
            <summary>
            Optionally specifies whether data in the file system may be accessed
            publicly and the level of access. <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem" />
            specifies full public read access for file system and path data.
            Clients can enumerate paths within the file system via anonymous
            request, but cannot enumerate file systems within the storage
            account.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path" /> specifies public
            read access for paths.  Path data within this file system can be
            read via anonymous request, but file system data is not available.
            Clients cannot enumerate paths within the file system via anonymous
            request.  <see cref="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None" /> specifies that the
            file system data is private to the account owner.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions.Metadata">
            <summary>
            Optional custom metadata to set for this file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemCreateOptions.EncryptionScopeOptions">
            <summary>
            Optional encryption scope options to set for this file system.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemEncryptionScopeOptions">
            <summary>
            Encryption scope options to be used when creating a file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemEncryptionScopeOptions.DefaultEncryptionScope">
            <summary>
            Specifies the default encryption scope to set on the file system and use for all future writes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileSystemEncryptionScopeOptions.PreventEncryptionScopeOverride">
            <summary>
            If true, prevents any request from specifying a different encryption scope than the scope set on the container.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions">
            <summary>
            Optional parameters for uploading to a Data Lake file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.HttpHeaders">
            <summary>
            Optional standard HTTP header properties that can be set for the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Metadata">
            <summary>
            Optional custom metadata to set for this file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Permissions">
            <summary>
            Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
            permissions for the file owner, the file owning group, and others. Each class may be granted read,
            write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
            octal notation (e.g. 0766) are supported.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Umask">
            <summary>
            Optional and only valid if Hierarchical Namespace is enabled for the account.
            When creating a file or directory and the parent folder does not have a default ACL,
            the umask restricts the permissions of the file or directory to be created. The resulting
            permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
            if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
            0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
            in 4-digit octal notation (e.g. 0766).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Conditions">
            <summary>
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to apply to the request.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.ProgressHandler">
            <summary>
            Optional <see cref="T:System.IProgress`1" /> to provide progress updates about data transfers.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.Close">
            <summary>
            Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled,
            a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the
            difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter
            is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the
            flush operation completes successfully, the service raises a file change notification with a property indicating that
            this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the
            file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that
            the file stream has been closed.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.TransferOptions">
            <summary>
            Optional <see cref="T:Azure.Storage.StorageTransferOptions" /> to configure
            parallel transfer behavior.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeFileUploadOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeLease">
            <summary>
            Lease.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeLease.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally.
            If the request service version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeLease.LastModified">
            <summary>
            Returns the date and time the file system or path was last modified.
            Any operation that modifies the file system or path, including an update of the its metadata or properties,
            changes the last-modified time of the filesystem or path..
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeLease.LeaseId">
            <summary>
            Uniquely identifies a file system's or path's lease.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeLease.LeaseTime">
            <summary>
            Gets the approximate time remaining in the lease period, in
            seconds.  This is only provided when breaking a lease.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeLease.#ctor">
            <summary>
            Prevent direct instantiation of Lease instances.
            You can use DataLakeModelFactory.Lease instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration">
            <summary>
            Lease duration type values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration.Infinite">
            <summary>
            Infinite.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration.Fixed">
            <summary>
            Fixed.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState">
            <summary>
            Lease state values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState.Available">
            <summary>
            Available.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState.Leased">
            <summary>
            Leased.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState.Expired">
            <summary>
            Expired.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState.Breaking">
            <summary>
            Breaking.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseState.Broken">
            <summary>
            Broken.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus">
            <summary>
            Lease status values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus.Locked">
            <summary>
            Locked.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus.Unlocked">
            <summary>
            Unlocked.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeMetrics">
            <summary>
            A summary of request statistics grouped by API in hour or minute aggregates for Data Lake.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeMetrics.Version">
            <summary>
            The version of Storage Analytics to configure.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeMetrics.Enabled">
            <summary>
            Indicates whether metrics are enabled for the Data Lake service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeMetrics.RetentionPolicy">
            <summary>
            The retention policy which determines how long the associated data should persist.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeMetrics.IncludeApis">
            <summary>
            Indicates whether metrics should generate summary statistics for called API operations.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory">
            <summary>
            DataLakeModelFactory provides utilities for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileDownloadDetails(System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ETag,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.String,System.String,System.String,System.Uri,Azure.Storage.Files.DataLake.Models.CopyStatus,Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration,Azure.Storage.Files.DataLake.Models.DataLakeLeaseState,Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus,System.String,System.Boolean,System.String,System.Byte[])">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileDownloadDetails(System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Azure.ETag,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.String,System.String,System.String,System.Uri,Azure.Storage.Files.DataLake.Models.CopyStatus,Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration,Azure.Storage.Files.DataLake.Models.DataLakeLeaseState,Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus,System.String,System.Boolean,System.String,System.Byte[])" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileDownloadInfo(System.Int64,System.IO.Stream,System.Byte[],Azure.Storage.Files.DataLake.Models.FileDownloadDetails)">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileDownloadInfo(System.Int64,System.IO.Stream,System.Byte[],Azure.Storage.Files.DataLake.Models.FileDownloadDetails)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemInfo(Azure.ETag,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemInfo(Azure.ETag,System.DateTimeOffset)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemItem(System.String,System.Nullable{System.Boolean},System.String,Azure.Storage.Files.DataLake.Models.FileSystemProperties)">
            <summary>
            Creates a new FileSystemItem instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemItem(System.String,Azure.Storage.Files.DataLake.Models.FileSystemProperties)">
            <summary>
            Creates a new FileSystemItem" instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemProperties(System.DateTimeOffset,System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus},System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseState},System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration},System.Nullable{Azure.Storage.Files.DataLake.Models.PublicAccessType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.ETag,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
            <summary>
            Creates a new FileSystemProperties instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.FileSystemProperties(System.DateTimeOffset,System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus},System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseState},System.Nullable{Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration},System.Nullable{Azure.Storage.Files.DataLake.Models.PublicAccessType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.ETag)">
            <summary>
            Creates a new FileSystemProperties instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.Lease(Azure.ETag,System.DateTimeOffset,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeLease" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathAccessControl(System.String,System.String,Azure.Storage.Files.DataLake.Models.PathPermissions,System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem})">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathAccessControl(System.String,System.String,Azure.Storage.Files.DataLake.Models.PathPermissions,System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem})" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathContentInfo(System.String,Azure.ETag,System.DateTimeOffset,System.String,System.String,System.String,System.String,System.String,System.Int64,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathContentInfo(System.String,Azure.ETag,System.DateTimeOffset,System.String,System.String,System.String,System.String,System.String,System.Int64,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathCreateInfo(Azure.Storage.Files.DataLake.Models.PathInfo,System.String)">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathCreateInfo(Azure.Storage.Files.DataLake.Models.PathInfo,System.String)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathInfo(Azure.ETag,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathInfo(Azure.ETag,System.DateTimeOffset)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathItem(System.String,System.Nullable{System.Boolean},System.DateTimeOffset,Azure.ETag,System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new PathItem instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathItem(System.String,System.Nullable{System.Boolean},System.DateTimeOffset,Azure.ETag,System.Nullable{System.Int64},System.String,System.String,System.String)">
            <summary>
            Creates a new PathItem instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathProperties(System.DateTimeOffset,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.String},System.DateTimeOffset,System.String,System.String,System.String,System.Uri,Azure.Storage.Files.DataLake.Models.CopyStatus,System.Boolean,Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration,Azure.Storage.Files.DataLake.Models.DataLakeLeaseState,Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus,System.Int64,System.String,Azure.ETag,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.DateTimeOffset,System.Boolean)">
            <summary>
            Creates a new PathProperties instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.PathProperties(System.DateTimeOffset,System.DateTimeOffset,System.Collections.Generic.IDictionary{System.String,System.String},System.DateTimeOffset,System.String,System.String,System.String,System.Uri,Azure.Storage.Files.DataLake.Models.CopyStatus,System.Boolean,Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration,Azure.Storage.Files.DataLake.Models.DataLakeLeaseState,Azure.Storage.Files.DataLake.Models.DataLakeLeaseStatus,System.Int64,System.String,Azure.ETag,System.Byte[],System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.DateTimeOffset)">
            <summary>
            Creates a new PathProperties instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.UserDelegationKey(System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.UserDelegationKey(System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.String)" /> instance for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeModelFactory.DataLakeQueryError(System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Creates a new BlobQueryError instance for mocking.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions">
            <summary>
            Optional parameters for <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.OpenReadAsync(Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions.Position">
            <summary>
            The position within the file to begin the stream.
            Defaults to the beginning of the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions.BufferSize">
            <summary>
            The buffer size to use when the stream downloads parts
            of the file.  Defaults to 4 MB.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions.Conditions">
            <summary>
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
            the download of the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions.TransferValidation">
            <summary>
            Optional override settings for this client's <see cref="P:Azure.Storage.Files.DataLake.DataLakeClientOptions.TransferValidation" /> settings.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeOpenReadOptions.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="allowModifications">
            If false, a <see cref="T:Azure.RequestFailedException" /> will be thrown if the file is modified while
            it is being read from.
            </param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions">
            <summary>
            Optional parameters for creating a file or directory..
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.HttpHeaders">
            <summary>
            Optional standard HTTP header properties that can be set for the
            new file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.Metadata">
            <summary>
            Optional custom metadata to set for this file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.AccessOptions">
            <summary>
            Access options to set on the newly-created path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.LeaseId">
            <summary>
            Optional.  Proposed LeaseId.
            Does not apply to directories.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.LeaseDuration">
            <summary>
            Optional.  Specifies the duration of the lease, in seconds, or specify
            <see cref="F:Azure.Storage.Files.DataLake.DataLakeLeaseClient.InfiniteLeaseDuration" /> for a lease that never expires.
            A non-infinite lease can be between 15 and 60 seconds.
            Does not apply to directories.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.ScheduleDeletionOptions">
            <summary>
            Options for scheduling the deletion of a path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathCreateOptions.Conditions">
            <summary>
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
            conditions on the creation of this file or directory.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions">
            <summary>
            Options for scheduling the deletion of a path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.TimeToExpire">
            <summary>
            Duration before file should be deleted.
            Does not apply to directories.
            <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.TimeToExpire" /> and <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.ExpiresOn" /> cannot both be set.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.ExpiresOn">
            <summary>
            The <see cref="T:System.DateTimeOffset" /> to set for when
            the file will be deleted.  If null, the existing
            ExpiresOn time on the file will be removed, if it exists.
            Does not apply to directories.
            <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.ExpiresOn" /> and <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.TimeToExpire" /> cannot both be set.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.#ctor(System.Nullable{System.DateTimeOffset})">
            <summary>
            Constructor.  Sets the <see cref="T:System.DateTimeOffset" /> when the path will
            be deleted.
            </summary>
            <param name="expiresOn">
            The DateTimeOffset when the file will be deleted.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakePathScheduleDeletionOptions.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Constructor.  Sets time when the path will be deleted, relative to the current time.
            </summary>
            <param name="timeToExpire">
            Duration before path will be deleted.
            </param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField">
            <summary>
            Describe a field in <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowOptions" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField.Type">
            <summary>
            The type of the field. Required.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField.Name">
            <summary>
            The name of the field.  Optional.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField.Precision">
            <summary>
            The precision of the field.  Required if Type is <see cref="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Decimal" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField.Scale">
            <summary>
            The scale of the field.  Required if Type is <see cref="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Decimal" />.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType">
            <summary>
            The type of a <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Int64">
            <summary>
            Int64.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Bool">
            <summary>
            Bool.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Timestamp">
            <summary>
            Timestamp in milliseconds.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowFieldType.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowOptions">
            <summary>
            Arrow configuration.  Only valid for <see cref="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.OutputTextConfiguration" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowOptions.Schema">
            <summary>
            List of <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryArrowField" /> describing the schema of the data.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions">
            <summary>
            CSV text configuration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions.RecordSeparator">
            <summary>
            Record Separator.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions.ColumnSeparator">
            <summary>
            Column separator.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions.QuotationCharacter">
            <summary>
            Field quote.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions.EscapeCharacter">
            <summary>
            Escape character.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions.HasHeaders">
            <summary>
            Has headers.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryError">
            <summary>
            Data Lake query error.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryError.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryError.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryError.IsFatal">
            <summary>
            If the error is a fatal error.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryError.Position">
            <summary>
            The position of the error.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryJsonTextOptions">
            <summary>
            JSON text configuration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryJsonTextOptions.RecordSeparator">
            <summary>
            Record Separator.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions">
            <summary>
            Optional parameters for <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.QueryAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.InputTextConfiguration">
            <summary>
            Optional input text configuration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.OutputTextConfiguration">
            <summary>
            Optional output text configuration.
            </summary>
        </member>
        <member name="E:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.ErrorHandler">
            <summary>
            Optional error handler.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.Conditions">
            <summary>
            Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on the query.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeQueryOptions.ProgressHandler">
            <summary>
            Optional progress handler.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryParquetTextOptions">
            <summary>
            Parquet text configuration.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryTextOptions">
            <summary>
            Data Lake Query Text Configuration.
            See <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryCsvTextOptions" /> and <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeQueryJsonTextOptions" />.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions">
            <summary>
            Specifies lease access conditions for a file system or path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions.LeaseId">
            <summary>
            Optionally limit requests to resources with an active lease
            matching this Id.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions.ToString">
            <summary>
            Converts the value of the current RequestConditions object to
            its equivalent string representation.
            </summary>
            <returns>
            A string representation of the RequestConditions.
            </returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions.AddConditions(System.Text.StringBuilder)">
            <summary>
            Collect any request conditions.  Conditions should be separated by
            a semicolon.
            </summary>
            <param name="conditions">The collected conditions.</param>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeRetentionPolicy">
            <summary>
            The retention policy which determines how long the associated data should persist.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeRetentionPolicy.Enabled">
            <summary>
            Indicates whether a retention policy is enabled for the storage service.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeRetentionPolicy.Days">
            <summary>
            Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.DataLakeRetentionPolicy.#ctor">
            <summary>
            Creates a new DataLakeRetentionPolicy instance.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties">
            <summary>
            Data Lake Service Properties.
            Note that HNS-enabled storage accounts do not support static website.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.Logging">
            <summary>
            Azure Analytics Logging settings.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.HourMetrics">
            <summary>
            A summary of request statistics grouped by API in hour or minute aggregates for Data Lake.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.MinuteMetrics">
            <summary>
            A summary of request statistics grouped by API in hour or minute aggregates for Data Lake.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.Cors">
            <summary>
            The set of CORS rules.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.DefaultServiceVersion">
            <summary>
            The default version to use for requests to the Data Lake service if an incoming request's version is not specified.
            Possible values include version 2008-10-27 and all more recent versions.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.DeleteRetentionPolicy">
            <summary>
            The retention policy which determines how long the associated data should persist.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeServiceProperties.StaticWebsite">
            <summary>
            The properties that enable an account to host a static website.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier">
            <summary>
            A Signed identifier for a shared access policy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier.Id">
            <summary>
            A unique id for the <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeSignedIdentifier.AccessPolicy">
            <summary>
            An <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeAccessPolicy" />.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.DataLakeStaticWebsite">
            <summary>
            The properties that enable an account to host a static website.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeStaticWebsite.Enabled">
            <summary>
            Indicates whether this account is hosting a static website.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeStaticWebsite.IndexDocument">
            <summary>
            The default name of the index page under each directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeStaticWebsite.ErrorDocument404Path">
            <summary>
            The absolute path of the custom 404 page.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.DataLakeStaticWebsite.DefaultIndexDocumentPath">
            <summary>
            Absolute path of the default index page.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileDownloadDetails">
            <summary>
            Properties returned when downloading a File.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.LastModified">
            <summary>
            Returns the <see cref="T:System.DateTimeOffset" /> the file was last modified. Any operation that modifies the file,
            including an update of the file's metadata or properties, changes the last-modified time of the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.Metadata">
            <summary>
            The file's metadata.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ContentRange">
             <summary>
             Indicates the range of bytes returned in the event that the client requested a subset of the file
             setting the 'Range' request header.
            
             The format of the Content-Range is expected to comeback in the following format.
             [unit] [start]-[end]/[FileSize]
             (e.g. bytes 1024-3071/10240)
            
             The [end] value will be the inclusive last byte (e.g. header "bytes 0-7/8" is the entire 8-byte file).
             </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally on the file.
            If the request service version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ContentEncoding">
            <summary>
            This header returns the value that was specified for the Content-Encoding request header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CacheControl">
            <summary>
            This header is returned if it was previously specified for the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ContentDisposition">
            <summary>
            This header returns the value that was specified for the 'x-ms-blob-content-disposition' header.
            The Content-Disposition response header field conveys additional information about how to process the response payload,
            and also can be used to attach additional metadata. For example, if set to attachment, it indicates that the user-agent
            should not display the response, but instead show a Save As dialog with a filename other than the file name specified.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ContentLanguage">
            <summary>
            This header returns the value that was specified for the Content-Language request header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopyCompletedOn">
            <summary>
            Conclusion time of the last attempted Copy Blob operation where this file was the destination file.
            This value can specify the time of a completed, aborted, or failed copy attempt. This header does not
            appear if a copy is pending, if this blob has never been the destination in a Copy Blob operation, or
            if this blob has been modified after a concluded Copy Blob operation using Set Blob Properties,
            Put Blob, or Put Block List.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopyStatusDescription">
            <summary>
            Only appears when x-ms-copy-status is failed or pending. Describes the cause of the last fatal or
            non-fatal copy operation failure. This header does not appear if this blob has never been the destination
            in a Copy Blob operation, or if this blob has been modified after a concluded Copy Blob operation using
            Set Blob Properties, Put Blob, or Put Block List
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopyId">
            <summary>
            String identifier for this copy operation. Use with Get Properties to check the status of this copy
            operation, or pass to Abort Copy Blob to abort a pending copy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopyProgress">
            <summary>
            Contains the number of bytes copied and the total bytes in the source in the last attempted Copy Blob operation
            where this blob was the destination blob. Can show between 0 and Content-Length bytes copied. This header does not
            appear if this blob has never been the destination in a Copy Blob operation, or if this blob has been modified after
            a concluded Copy Blob operation using Set Blob Properties, Put Blob, or Put Block List
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopySource">
            <summary>
            URL up to 2 KB in length that specifies the source blob or file used in the last attempted Copy Blob
            operation where this blob was the destination blob. This header does not appear if this blob has never
            been the destination in a Copy Blob operation, or if this blob has been modified after a concluded Copy
            Blob operation using Set Blob Properties, Put Blob, or Put Block List.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.CopyStatus">
            <summary>
            State of the copy operation identified by x-ms-copy-id.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.LeaseDuration">
            <summary>
            When a file is leased, specifies whether the lease is of infinite or fixed duration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.LeaseState">
            <summary>
            Lease state of the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.LeaseStatus">
            <summary>
            The current lease status of the file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.AcceptRanges">
            <summary>
            Indicates that the service supports requests for partial file content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.IsServerEncrypted">
            <summary>
            The value of this header is set to true if the file data and application metadata are completely
            encrypted using the specified algorithm. Otherwise, the value is set to false (when the file is
            unencrypted, or if only parts of the file/application metadata are encrypted).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.EncryptionKeySha256">
            <summary>
            The SHA-256 hash of the encryption key used to encrypt the file. This header is only returned when
            the file was encrypted with a customer-provided key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.ContentHash">
            <summary>
            If the file has a MD5 hash, and if request contains range header (Range or x-ms-range), this response
            header is returned with the value of the whole file's MD5 value. This value may or may not be equal
            to the value returned in Content-MD5 header, with the latter calculated from the requested range
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileDownloadDetails.#ctor">
            <summary>
            Prevent direct instantiation of FileDownloadDetails instances.
            You can use DataLakeModelFactory.FileDownloadDetails instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileDownloadInfo">
            <summary>
            The properties and content returned from downloading a file.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.ContentLength">
            <summary>
            The number of bytes present in the response body.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Content">
            <summary>
            Content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.ContentHash">
            <summary>
            If the file has an MD5 hash and this operation is to read the full file,
            this response header is returned so that the client can check for message content integrity.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.Properties">
            <summary>
            Properties returned when downloading a file.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileDownloadInfo.#ctor">
            <summary>
            Prevent direct instantiation of FileDownloadInfo instances.
            You can use DataLakeModelFactory.FileDownloadInfo instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy">
            <summary>
            FileSystemAccessPolicy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy.DataLakePublicAccess">
            <summary>
            A <see cref="T:Azure.Storage.Files.DataLake.Models.PublicAccessType" /> indicating whether data in the file system may
            be accessed publicly and the level of access.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally.
            If the request service version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy.LastModified">
            <summary>
            Returns the <see cref="T:System.DateTimeOffset" /> the file system was last modified.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy.SignedIdentifiers">
            <summary>
            A collection of signed identifiers stored on the file system.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemAccessPolicy.#ctor">
            <summary>
            Creates a new FileSystemAccessPolicy instance.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemInfo">
            <summary>
            FileSystemInfo.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemInfo.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally.
            If the request version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemInfo.LastModified">
            <summary>
            Returns the <see cref="T:System.DateTimeOffset" /> the file system was last modified. Any operation that modifies the
            file system, including an update of the file systems's metadata or properties, changes the last-modified
            time of the file system.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemInfo.#ctor">
            <summary>
            Prevent direct instantiation of FileSystemInfo instances.
            You can use DataLakeModelFactory.FileSystemInfo instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemItem">
            <summary>
            An Azure Data Lake file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemItem.Name">
            <summary>
            The name of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemItem.IsDeleted">
            <summary>
            Deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemItem.VersionId">
            <summary>
            Version.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemItem.Properties">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.Models.FileSystemProperties" /> of the file system.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemItem.#ctor">
            <summary>
            Prevent direct instantiation of FileSystemItem instances.
            You can use DataLakeModelFactory.FileSystemItem instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemProperties">
            <summary>
            Properties of a file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LastModified">
            <summary>
            Returns the <see cref="T:System.DateTimeOffset" /> the file system was last modified. Any operation that modifies the
            file system, including an update of the file systems's metadata or properties, changes the last-modified
            time of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LeaseStatus">
            <summary>
            <see cref="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LeaseStatus" /> of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LeaseState">
            <summary>
            <see cref="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LeaseState" /> of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.LeaseDuration">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeLeaseDuration" /> of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.PublicAccess">
            <summary>
            <see cref="T:Azure.Storage.Files.DataLake.Models.PublicAccessType" /> of the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.HasImmutabilityPolicy">
            <summary>
            Version 2017-11-09 and newer. Indicates whether the file system has an immutability policy set on it.
            Value is true if there is a policy set, false otherwise.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.HasLegalHold">
            <summary>
            Version 2017-11-09 and newer. Indicates whether the file system has a legal hold.
            Value is true if there is one or more legal hold(s), false otherwise.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally on the file system.
            If the request service version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.Metadata">
            <summary>
            The file systems's metadata.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.DeletedOn">
            <summary>
            DeletedTime.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.RemainingRetentionDays">
            <summary>
            RemainingRetentionDays.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.DefaultEncryptionScope">
            <summary>
            DefaultEncryptionScope.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.FileSystemProperties.PreventEncryptionScopeOverride">
            <summary>
            DenyEncryptionScopeOverride.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.FileSystemProperties.#ctor">
            <summary>
            Prevent direct instantiation of FileSystemProperties instances.
            You can use BlobsModelFactory.FileSystemProperties instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemStates">
            <summary>
            Specifies options for listing blob containers with the
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)"></see>
            operation.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.FileSystemStates.None">
            <summary>
            Default flag specifying that no flags are set in <see cref="T:Azure.Storage.Files.DataLake.Models.FileSystemStates" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.FileSystemStates.Deleted">
            <summary>
            Flag specifying that deleted containers should be included.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.FileSystemStates.System">
            <summary>
            Flag specifying that system containers should be included.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.FileSystemTraits">
            <summary>
            Specifies options for listing file systems with the
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetFileSystems(Azure.Storage.Files.DataLake.Models.FileSystemTraits,Azure.Storage.Files.DataLake.Models.FileSystemStates,System.String,System.Threading.CancellationToken)" /> operation.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.FileSystemTraits.None">
            <summary>
            Default flag specifying that no flags are set in <see cref="T:Azure.Storage.Files.DataLake.Models.FileSystemTraits" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.FileSystemTraits.Metadata">
            <summary>
            Flag specifying that the file system's metadata should
            be included.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.GetFileSystemsAsyncCollection">
            <summary>
            This class wraps the DateLakeServiceClient.GetFileSystemsAsync return values
            and maps them into DataLake types.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal">
            <summary>
            The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256".
            Must be provided if the x-ms-encryption-key header is provided.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal.AES256">
            <summary>
            AES256.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem">
            <summary>
            The ListBlobsIncludeItem.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Copy">
            <summary>
            copy.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Deleted">
            <summary>
            deleted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Metadata">
            <summary>
            metadata.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Snapshots">
            <summary>
            snapshots.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Uncommittedblobs">
            <summary>
            uncommittedblobs.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Versions">
            <summary>
            versions.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.ListBlobsIncludeItem.Tags">
            <summary>
            tags.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem">
            <summary>
            Either a <see cref="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Prefix" /> or <see cref="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Path" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Prefix">
            <summary>
            Gets a prefix, relative to the delimiter used to get the paths.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Path">
            <summary>
            Gets a path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.IsPrefix">
            <summary>
            Gets a value indicating if this item represents a <see cref="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Prefix" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.IsPath">
            <summary>
            Gets a value indicating if this item represents a <see cref="P:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.Path" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathHierarchyDeletedItem.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode">
            <summary>
            Mode "set" sets POSIX access control rights on files and directories, "modify" modifies one or more POSIX access control rights
            that pre-exist on files and directories, "remove" removes one or more POSIX access control rights  that were present earlier on files and directories.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode.Set">
            <summary>
            set
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode.Modify">
            <summary>
            modify
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode.Remove">
            <summary>
            remove
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathAccessControl">
            <summary>
            The Access Control for a path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControl.Owner">
            <summary>
            The owner of the file or directory. Included in the response if Hierarchical Namespace is enabled for the account.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControl.Group">
            <summary>
            The owning group of the file or directory. Included in the response if Hierarchical Namespace is enabled for the account.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControl.Permissions">
            <summary>
            The POSIX access permissions for the file owner, the file owning group, and others. Included in the response if
            Hierarchical Namespace is enabled for the account.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControl.AccessControlList">
            <summary>
            The POSIX access control list for the file or directory.  Included in the response only if Hierarchical
            Namespace is enabled for the account.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControl.#ctor">
            <summary>
            Prevent direct instantiation of PathAccessControl instances.
            You can use DataLakeModelFactory.PathAccessControl instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions">
            <summary>
            Extension methods for RolePermissions.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ParseOctalRolePermissions(System.Char)">
            <summary>
            Parses octal char to RolePermissions.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ParseSymbolicRolePermissions(System.String,System.Boolean)">
            <summary>
            Parses symbolic permissions string to RolePermissions.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowStickyBit">If sticky bit is allowed.</param>
            <returns><see cref="T:Azure.Storage.Files.DataLake.Models.RolePermissions" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ToOctalRolePermissions(Azure.Storage.Files.DataLake.Models.RolePermissions)">
            <summary>
            Returns the octal string representation of this RolePermissions.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ToSymbolicRolePermissions(Azure.Storage.Files.DataLake.Models.RolePermissions)">
            <summary>
            Returns the octal string respentation of this RolePermissions.
            </summary>
            <returns>String.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ToAccessControlListString(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem})">
            <summary>
            Converts the Access Control List to a <see cref="T:System.String" />.
            </summary>
            <param name="accessControlList">The Access Control List to serialize</param>
            <returns>string.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlExtensions.ParseAccessControlList(System.String)">
            <summary>
            Deseralizes an access control list string  into a list of PathAccessControlEntries.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>A List of <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" />.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem">
            <summary>
            Represents an access control in a file access control list.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.DefaultScope">
            <summary>
            Indicates whether this is the default entry for the ACL.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.AccessControlType">
            <summary>
            Specifies which role this entry targets.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.EntityId">
            <summary>
            Specifies the entity for which this entry applies.
            Must be omitted for types mask or other.  It must also be omitted when the user or group is the owner.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.Permissions">
            <summary>
            Specifies the permissions granted to this entry.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.#ctor(Azure.Storage.Files.DataLake.Models.AccessControlType,Azure.Storage.Files.DataLake.Models.RolePermissions,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="accessControlType">Specifies which role this entry targets.</param>
            <param name="permissions">Specifies the permissions granted to this entry.</param>
            <param name="defaultScope">Indicates whether this is the default entry for the ACL.</param>
            <param name="entityId">Optional entity ID to which this entry applies.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.ToString">
            <summary>
            Override of ToString().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathAccessControlItem.Parse(System.String)">
            <summary>
            Parses the provided string into a <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" />
            </summary>
            <param name="s">The string representation of the access control list.</param>
            <returns>A <see cref="T:Azure.Storage.Files.DataLake.Models.PathAccessControlItem" />.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathContentInfo">
            <summary>
            PathContentInfo
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentHash">
            <summary>
            An hash of the request content. This header is only returned for "Flush" operation.
            This header is returned so that the client can check for message content integrity.
            This header refers to the content of the request, not actual file content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ETag">
            <summary>
            An HTTP entity tag associated with the file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.LastModified">
            <summary>
            The data and time the file or directory was last modified
            Write operations on the file or directory update the last modified time.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.AcceptRanges">
            <summary>
            Indicates that the service supports requests for partial file content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.CacheControl">
            <summary>
            If the Cache-Control request header has previously been set for the resource, that value is returned in this header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentDisposition">
            <summary>
            If the Content-Disposition request header has previously been set for the resource, that value is returned in this header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentEncoding">
            <summary>
            If the Content-Encoding request header has previously been set for the resource, that value is returned in this header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentLanguage">
            <summary>
            If the Content-Language request header has previously been set for the resource, that value is returned in this header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentLength">
            <summary>
            The size of the resource in bytes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentRange">
            <summary>
            Indicates the range of bytes returned in the event that the client requested a subset of the file by
            setting the Range request header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.ContentType">
            <summary>
            The content type specified for the resource. If no content type was specified, the default content
            type is application/octet-stream.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathContentInfo.Metadata">
            <summary>
            Metadata for the path
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathContentInfo.#ctor">
            <summary>
            Prevent direct instantiation of PathContentInfo instances.
            You can use DataLakeModelFactory.PathContentInfo instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathCreateInfo">
            <summary>
            Path CreateResult
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathCreateInfo.PathInfo">
            <summary>
            Path info for the file or directory.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathCreateInfo.Continuation">
            <summary>
            When renaming a directory, the number of paths that are renamed with each invocation is limited.
            If the number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.
            When a continuation token is returned in the response, it must be specified in a subsequent invocation of the rename
            operation to continue renaming the directory.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathCreateInfo.#ctor">
            <summary>
            Prevent direct instantiation of PathCreateInfo instances.
            You can use DataLakeModelFactory.PathCreateInfo instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathDeletedItem">
            <summary>
            A path that has been soft deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedItem.Path">
            <summary>
            The name of the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedItem.DeletionId">
            <summary>
            The deletion ID associated with the deleted path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedItem.DeletedOn">
            <summary>
            When the path was deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedItem.RemainingRetentionDays">
            <summary>
            The number of days left before the soft deleted path will be permanently deleted.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathDeletedItem.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedSegment.Continuation">
            <summary>
            If the number of paths to be listed exceeds the maxResults limit, a continuation token is returned.
            When a continuation token is returned in the response, it must be specified in a subsequent invocation
            of the list operation to continue listing the paths.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathDeletedSegment.DeletedPaths">
            <summary>
            PathItems.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathDeletedSegment.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathHttpHeaders">
             <summary>
             Standard HTTP properties supported by paths.
             These properties are represented as standard HTTP headers use standard
             names, as specified in the Header Field Definitions section 14 of the
             HTTP/1.1 protocol specification.
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/setting-and-retrieving-properties-and-metadata-for-blob-resources">
             Setting and retrieving properties and metadata for service resources</see>.
             </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ContentType">
            <summary>
            The MIME content type of the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ContentHash">
            <summary>
            An MD5 hash of the path content. This hash is used to verify the
            integrity of the path during transport.  When this header is
            specified, the storage service checks the hash that has arrived
            with the one that was sent. If the two hashes do not match, the
            operation will fail with error code 400 (Bad Request).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ContentEncoding">
            <summary>
            Specifies which content encodings have been applied to the path.
            This value is returned to the client when the Get path operation
            is performed on the path resource. The client can use this value
            when returned to decode the path content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ContentLanguage">
            <summary>
            Specifies the natural language used by this resource.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ContentDisposition">
            <summary>
            Conveys additional information about how to process the response
            payload, and also can be used to attach additional metadata.  For
            example, if set to attachment, it indicates that the user-agent
            should not display the response, but instead show a Save As dialog
            with a filename other than the path name specified.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.CacheControl">
            <summary>
            Specify directives for caching mechanisms.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.ToString">
            <summary>
            Creates a string representation of a
            <see cref="T:Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.Equals(System.Object)">
            <summary>
            Check if two <see cref="T:Azure.Storage.Files.DataLake.Models.PathHttpHeaders" /> instances are equal.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathHttpHeaders.GetHashCode">
            <summary>
            Get a hash code for the <see cref="T:Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />.
            </summary>
            <returns>Hash code for the <see cref="T:Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathInfo">
            <summary>
            PathInfo
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathInfo.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally.
            If the request version is 2011-08-18 or newer, the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathInfo.LastModified">
            <summary>
            Returns the date and time the path was last modified. Any operation that modifies the path,
            including an update of the paths's metadata or properties, changes the last-modified time of the path.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathInfo.#ctor">
            <summary>
            Prevent direct instantiation of PathInfo instances.
            You can use DataLakeModelFactory.PathInfo instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathItem">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.Name">
            <summary>
            name
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.IsDirectory">
            <summary>
            isDirectory
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.LastModified">
            <summary>
            lastModified
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.ETag">
            <summary>
            eTag
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.ContentLength">
            <summary>
            contentLength
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.Owner">
            <summary>
            owner
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.Group">
            <summary>
            group
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.Permissions">
            <summary>
            permissions
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.CreatedOn">
            <summary>
            Created on.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.ExpiresOn">
            <summary>
            Expiry-Time.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathItem.EncryptionScope">
            <summary>
            The name of the encryption scope under which the blob is encrypted.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathItem.#ctor">
            <summary>
            Prevent direct instantiation of PathItem instances.
            You can use DataLakeModelFactory.PathItem instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathPermissions">
            <summary>
            Represents POSIX-style permissions on a given resource. Each resource specifies permissions for the owner, the owning
            group, and everyone else. Permissions for users or groups not included here can be set using an Access Control List.
            Manipulating resource permissions is only supported when ADLS interop is enabled.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathPermissions.Owner">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.Models.RolePermissions" /> for the owner of the resource.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathPermissions.Group">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.Models.RolePermissions" /> for the owning group of the resource.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathPermissions.Other">
            <summary>
            The <see cref="T:Azure.Storage.Files.DataLake.Models.RolePermissions" /> for the other users.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathPermissions.StickyBit">
            <summary>
            If the sticky bit has been set. The sticky bit may be set on directories, the files in that
            directory may only be renamed or deleted by the file's owner, the directory's owner, or the root user.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathPermissions.ExtendedAcls">
            <summary>
            Whether or not there is more permissions information in the ACLs. The permissions string only returns
            information on the owner, owning group, and other, but the ACLs may contain more permissions for specific users
            or groups.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.#ctor">
            <summary>
            Internal empty constructor.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.#ctor(Azure.Storage.Files.DataLake.Models.RolePermissions,Azure.Storage.Files.DataLake.Models.RolePermissions,Azure.Storage.Files.DataLake.Models.RolePermissions,System.Boolean,System.Boolean)">
            <summary>
            Public constructor.
            </summary>
            <param name="owner">The path owner's permissions.</param>
            <param name="group">The path group's permissions.</param>
            <param name="other">Permissions for other users.</param>
            <param name="stickyBit">If sticky bit is enabled</param>
            <param name="extendedInfoInAcl">If there is extended info in the ACL</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.ParseOctalPermissions(System.String)">
            <summary>
            Parses a string in octal format to PathPermissions.
            </summary>
            <param name="s">Octal string to parse.</param>
            <returns><see cref="T:Azure.Storage.Files.DataLake.Models.PathPermissions" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.ParseSymbolicPermissions(System.String)">
            <summary>
            Parses a symbolic string to PathPermissions.
            </summary>
            <param name="s">String to parse.</param>
            <returns><see cref="T:Azure.Storage.Files.DataLake.Models.PathPermissions" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.ToOctalPermissions">
            <summary>
            Returns the octal representation of this PathPermissions as a string.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathPermissions.ToSymbolicPermissions">
            <summary>
            Returns the symbolic represenation of this PathPermissions as a string.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathProperties">
            <summary>
            PathProperties
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.LastModified">
            <summary>
            Returns the date and time the path  was last modified. Any operation that modifies the path,
            including an update of the path's metadata or properties, changes the last-modified time of the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CreatedOn">
            <summary>
            Returns the date and time the path was created.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.Metadata">
            <summary>
            The Path's metdata.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopyCompletedOn">
            <summary>
            Conclusion time of the last attempted Copy Blob operation where this path was the destination path.
            This value can specify the time of a completed, aborted, or failed copy attempt. This header does not appear
            if a copy is pending, if this path has never been the destination in a Copy path operation, or if this path
            has been modified after a concluded Copy Blob operation using Set path Properties, Put path, or Put Block List.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopyStatusDescription">
            <summary>
            Only appears when x-ms-copy-status is failed or pending. Describes the cause of the last fatal or non-fatal copy
            operation failure. This header does not appear if this path has never been the destination in a Copy Blob operation,
            or if this path has been modified after a concluded Copy Blob operation using Set Path Properties, Put Blob, or Put Block List
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopyId">
            <summary>
            String identifier for this copy operation. Use with Get Path Properties to check the status of this copy operation,
            or pass to Abort Copy Blob to abort a pending copy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopyProgress">
            <summary>
            Contains the number of bytes copied and the total bytes in the source in the last attempted Copy Blob operation where this
            path was the destination pth. Can show between 0 and Content-Length bytes copied. This header does not appear if this
            path has never been the destination in a Copy Blob operation, or if this path has been modified after a concluded Copy
            Blob operation using Set Blob Properties, Put Blob, or Put Block List
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopySource">
            <summary>
            URL up to 2 KB in length that specifies the source path or file used in the last attempted Copy Blob operation where
            this path was the destination path. This header does not appear if this path has never been the destination in a Copy
            Blob operation, or if this path has been modified after a concluded Copy Blob operation using Set Path Properties, Put
            Blob, or Put Block List.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CopyStatus">
            <summary>
            State of the copy operation identified by x-ms-copy-id.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.IsIncrementalCopy">
            <summary>
            Included if the path is incremental copy blob.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.LeaseDuration">
            <summary>
            When a path is leased, specifies whether the lease is of infinite or fixed duration.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.LeaseState">
            <summary>
            Lease state of the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.LeaseStatus">
            <summary>
            The current lease status of the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentLength">
            <summary>
            The number of bytes present in the response body.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentType">
            <summary>
            The content type specified for the path. The default content type is 'application/octet-stream'
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations conditionally. If the request version is 2011-08-18 or newer,
            the ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentHash">
            <summary>
            If the path has an MD5 hash and this operation is to read the full path, this response header is returned so that the client can
            check for message content integrity.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentEncoding">
            <summary>
            This header returns the value that was specified for the Content-Encoding request header
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentDisposition">
            <summary>
            This header returns the value that was specified for the 'x-ms-blob-content-disposition' header.
            The Content-Disposition response header field conveys additional information about how to process the response payload,
            and also can be used to attach additional metadata. For example, if set to attachment, it indicates that the user-agent
            should not display the response, but instead show a Save As dialog with a filename other than the path name specified.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ContentLanguage">
            <summary>
            This header returns the value that was specified for the Content-Language request header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.CacheControl">
            <summary>
            This header is returned if it was previously specified for the path.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.AcceptRanges">
            <summary>
            Indicates that the service supports requests for partial path content.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.IsServerEncrypted">
            <summary>
            The value of this header is set to true if the path data and application metadata are completely encrypted using the
            specified algorithm. Otherwise, the value is set to false (when the path is unencrypted, or if only parts of the path/application
            metadata are encrypted).
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.EncryptionKeySha256">
            <summary>
            The SHA-256 hash of the encryption key used to encrypt the metadata. This header is only returned when the metadata
            was encrypted with a customer-provided key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.AccessTier">
            <summary>
            The tier of block blob on blob storage LRS accounts. For blob storage LRS accounts, valid values are Hot/Cool/Archive.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ArchiveStatus">
            <summary>
            For blob storage LRS accounts, valid values are rehydrate-pending-to-hot/rehydrate-pending-to-cool.
            If the blob is being rehydrated and is not complete then this header is returned indicating that rehydrate is pending
            and also tells the destination tier.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.AccessTierChangedOn">
            <summary>
            The time the tier was changed on the object. This is only returned if the tier on the block blob was ever set.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.ExpiresOn">
            <summary>
            The time the path will be deleted.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.EncryptionScope">
            <summary>
            Returns the name of the encryption scope used to encrypt the path contents and application metadata.
            Note that the absence of this header implies use of the default account encryption scope, or default
            file system encryption scope, if it has been set.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathProperties.IsDirectory">
            <summary>
            If this path represents a directory.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathProperties.#ctor">
            <summary>
            Prevent direct instantiation of PathProperties instances.
            You can use DataLakeModelFactory.PathProperties instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PathSegment">
            <summary>
            An enumeration of paths.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathSegment.Continuation">
            <summary>
            If the number of paths to be listed exceeds the maxResults limit, a continuation token is returned.
            When a continuation token is returned in the response, it must be specified in a subsequent invocation
            of the list operation to continue listing the paths.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.PathSegment.Paths">
            <summary>
            PathItems
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.PathSegment.#ctor">
            <summary>
            Prevent direct instantiation of PathSegment instances.
            You can use DataLakeModelFactory.PathSegment instead.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.PublicAccessType">
            <summary>
            Specifies whether data in the file system may be accessed publicly and the level of access
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.FileSystem">
            <summary>
            file system
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.PublicAccessType.Path">
            <summary>
            path
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo">
            <summary>
            Provides the version state of a successfully released path or file system.
            object.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.ETag">
            <summary>
            The ETag contains a value that you can use to perform operations
            conditionally.  If the request version is 2011-08-18 or newer, the
            ETag value will be in quotes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.LastModified">
            <summary>
            Returns the date and time the object was last modified. Any
            operation that modifies the path or file system, including an update
            of the object's metadata or properties, changes the last-modified
            time of the object.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.#ctor(Azure.ETag,System.DateTimeOffset)">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.
            </summary>
            <param name="eTag">
            The <see cref="P:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.ETag" /> contains a value that you can use to perform
            operations conditionally.
            </param>
            <param name="lastModified">
            The date and time the object was last modified.
            </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.#ctor(Azure.Storage.Files.DataLake.Models.PathInfo)">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.
            </summary>
            <param name="info">A released <see cref="T:Azure.Storage.Files.DataLake.Models.PathInfo" />.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.#ctor(Azure.Storage.Files.DataLake.Models.FileSystemInfo)">
            <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.
            </summary>
            <param name="info">A released <see cref="T:Azure.Storage.Files.DataLake.Models.FileSystemInfo" />.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.ToString">
            <summary>
            Creates a string representation of a
            <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.Equals(System.Object)">
            <summary>
            Check if two <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" /> instances are equal.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.Equals(Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo)">
            <summary>
            Check if two <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" /> instances are equal.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.GetHashCode">
            <summary>
            Get a hash code for the <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.
            </summary>
            <returns>Hash code for the <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.op_Equality(Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo,Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo)">
            <summary>
            Check if two <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" /> instances are equal.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo.op_Inequality(Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo,Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo)">
            <summary>
            Check if two <see cref="T:Azure.Storage.Files.DataLake.Models.ReleasedObjectInfo" /> instances are not equal.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if they're not equal, false otherwise.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem">
            <summary>
            Represents an access control in a file access control list for removal.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.DefaultScope">
            <summary>
            Indicates whether this is the default entry for the ACL.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.AccessControlType">
            <summary>
            Specifies which role this entry targets.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.EntityId">
            <summary>
            Specifies the entity for which this entry applies.
            Must be omitted for types mask or other.  It must also be omitted when the user or group is the owner.
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.#ctor(Azure.Storage.Files.DataLake.Models.AccessControlType,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="accessControlType">Specifies which role this entry targets.</param>
            <param name="defaultScope">Indicates whether this is the default entry for the ACL.</param>
            <param name="entityId">Optional entity ID to which this entry applies.</param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.ToString">
            <summary>
            Override of ToString().
            </summary>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.Parse(System.String)">
            <summary>
            Parses the provided string into a <see cref="T:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem" />
            </summary>
            <param name="serializedAccessControl">The string representation of the access control list.</param>
            <returns>A <see cref="T:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem" />.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.ToAccessControlListString(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem})">
            <summary>
            Converts the Access Control List for removal to a <see cref="T:System.String" />.
            </summary>
            <param name="accessControlList">The Access Control List for removal to serialize</param>
            <returns>string.</returns>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem.ParseAccessControlList(System.String)">
            <summary>
            Deseralizes an access control list string for removal into a list of RemovePathAccessControlItem.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>A List of <see cref="T:Azure.Storage.Files.DataLake.Models.RemovePathAccessControlItem" />.</returns>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.RolePermissions">
            <summary>
            Represents file permissions for a specific role.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.RolePermissions.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.RolePermissions.Execute">
            <summary>
            The execute permission.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.RolePermissions.Write">
            <summary>
            The write permission.
            </summary>
        </member>
        <member name="F:Azure.Storage.Files.DataLake.Models.RolePermissions.Read">
            <summary>
            The read permission.
            </summary>
        </member>
        <member name="T:Azure.Storage.Files.DataLake.Models.UserDelegationKey">
            <summary>
            A user delegation key
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedObjectId">
            <summary>
            The Azure Active Directory object ID in GUID format.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedTenantId">
            <summary>
            The Azure Active Directory tenant ID in GUID format
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedStartsOn">
            <summary>
            The date-time the key is active
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedExpiresOn">
            <summary>
            The date-time the key expires
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedService">
            <summary>
            Abbreviation of the Azure Storage service that accepts the key
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.SignedVersion">
            <summary>
            The service version that created the key
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.Models.UserDelegationKey.Value">
            <summary>
            The key as a base64 string
            </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.Models.UserDelegationKey.#ctor">
            <summary>
            Prevent direct instantiation of UserDelegationKey instances.
            You can use DataLakeModelFactory.UserDelegationKey instead.
            </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathAppendDataHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathAppendDataHeaders.ContentMD5">
            <summary> If the blob has an MD5 hash and this operation is to read the full blob, this response header is returned so that the client can check for message content integrity. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathAppendDataHeaders.XMsContentCrc64">
            <summary> This header is returned so that the client can check for message content integrity. The value of this header is computed by the Blob service; it is not necessarily the same value specified in the request headers. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathAppendDataHeaders.IsServerEncrypted">
            <summary> The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathAppendDataHeaders.EncryptionKeySha256">
            <summary> The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted with a customer-provided key. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.LastModified">
            <summary> The data and time the file or directory was last modified.  Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.Continuation">
            <summary> When renaming a directory, the number of paths that are renamed with each invocation is limited.  If the number of paths to be renamed exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the rename operation to continue renaming the directory. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.ContentLength">
            <summary> The size of the resource in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.IsServerEncrypted">
            <summary> The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathCreateHeaders.EncryptionKeySha256">
            <summary> The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted with a customer-provided key. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathDeleteHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathDeleteHeaders.Continuation">
            <summary> When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathDeleteHeaders.DeletionId">
            <summary> Returned only for hierarchical namespace space enabled accounts when soft delete is enabled. A unique identifier for the entity that can be used to restore it. See the Undelete REST API for more information. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathFlushDataHeaders.LastModified">
            <summary> The data and time the file or directory was last modified.  Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathFlushDataHeaders.ContentLength">
            <summary> The size of the resource in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathFlushDataHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathFlushDataHeaders.IsServerEncrypted">
            <summary> The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathFlushDataHeaders.EncryptionKeySha256">
            <summary> The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted with a customer-provided key. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.AcceptRanges">
            <summary> Indicates that the service supports requests for partial file content. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.CacheControl">
            <summary> If the Cache-Control request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentDisposition">
            <summary> If the Content-Disposition request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentEncoding">
            <summary> If the Content-Encoding request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentLanguage">
            <summary> If the Content-Language request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentLength">
            <summary> The size of the resource in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentRange">
            <summary> Indicates the range of bytes returned in the event that the client requested a subset of the file by setting the Range request header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentType">
            <summary> The content type specified for the resource. If no content type was specified, the default content type is application/octet-stream. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ContentMD5">
            <summary> The MD5 hash of complete file stored in storage. This header is returned only for "GetProperties" operation. If the Content-MD5 header has been set for the file, this response header is returned for GetProperties call so that the client can check for message content integrity. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.LastModified">
            <summary> The data and time the file or directory was last modified.  Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ResourceType">
            <summary> The type of the resource.  The value may be "file" or "directory".  If not set, the value is "file". </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.Properties">
            <summary> The user-defined properties associated with the file or directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.Owner">
            <summary> The owner of the file or directory. Included in the response if Hierarchical Namespace is enabled for the account. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.Group">
            <summary> The owning group of the file or directory. Included in the response if Hierarchical Namespace is enabled for the account. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.Permissions">
            <summary> The POSIX access permissions for the file owner, the file owning group, and others. Included in the response if Hierarchical Namespace is enabled for the account. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.ACL">
            <summary> The POSIX access control list for the file or directory.  Included in the response only if the action is "getAccessControl" and Hierarchical Namespace is enabled for the account. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.LeaseDuration">
            <summary> When a resource is leased, specifies whether the lease is of infinite or fixed duration. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.LeaseState">
            <summary> Lease state of the resource. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathGetPropertiesHeaders.LeaseStatus">
            <summary> The lease status of the resource. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathLeaseHeaders.LastModified">
            <summary> The data and time the file was last modified.  Write operations on the file update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathLeaseHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathLeaseHeaders.LeaseId">
            <summary> A successful "renew" action returns the lease ID. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathLeaseHeaders.LeaseTime">
            <summary> The time remaining in the lease period in seconds. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.AcceptRanges">
            <summary> Indicates that the service supports requests for partial file content. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.CacheControl">
            <summary> If the Cache-Control request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentDisposition">
            <summary> If the Content-Disposition request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentEncoding">
            <summary> If the Content-Encoding request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentLanguage">
            <summary> If the Content-Language request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentLength">
            <summary> The size of the resource in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentRange">
            <summary> Indicates the range of bytes returned in the event that the client requested a subset of the file by setting the Range request header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentType">
            <summary> The content type specified for the resource. If no content type was specified, the default content type is application/octet-stream. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ContentMD5">
            <summary> The MD5 hash of complete file. If the file has an MD5 hash and this read operation is to read the complete file, this response header is returned so that the client can check for message content integrity. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.LastModified">
            <summary> The data and time the file or directory was last modified.  Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.ResourceType">
            <summary> The type of the resource.  The value may be "file" or "directory".  If not set, the value is "file". </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.Properties">
            <summary> The user-defined properties associated with the file or directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.LeaseDuration">
            <summary> When a resource is leased, specifies whether the lease is of infinite or fixed duration. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.LeaseState">
            <summary> Lease state of the resource. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.LeaseStatus">
            <summary> The lease status of the resource. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.IsServerEncrypted">
            <summary> The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.EncryptionKeySha256">
            <summary> The SHA-256 hash of the encryption key used to encrypt the blob. This header is only returned when the blob was encrypted with a customer-provided key. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathReadHeaders.XMsContentMd5">
            <summary> The MD5 hash of complete file stored in storage. If the file has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned with the value of the complete file's MD5 value. This value may or may not be equal to the value returned in Content-MD5 header, with the latter calculated from the requested range. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String,System.Nullable{System.Int32})">
            <summary> Initializes a new instance of PathRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, container, or blob that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <param name="xMsLeaseDuration"> The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.CreateAsync(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Files.DataLake.Models.PathResourceType},System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.PathRenameMode},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{Azure.Storage.Files.DataLake.Models.PathExpiryOptions},System.String,System.Threading.CancellationToken)">
            <summary> Create File | Create Directory | Rename File | Rename Directory. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="resource"> Required only for Create File and Create Directory. The value must be "file" or "directory". </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="mode"> Optional. Valid only when namespace is enabled. This parameter determines the behavior of the rename operation. The value must be "legacy" or "posix", and the default value will be "posix". </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="renameSource"> An optional file or directory to be renamed.  The value must have the following format: "/{filesystem}/{path}".  If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved. This value must be a URL percent-encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="sourceLeaseId"> A lease ID for the source path. If specified, the source path must have an active lease and the lease ID must match. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="umask"> Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created.  The resulting permission is given by p bitwise and not u, where p is the permission and u is the umask.  For example, if p is 0777 and u is 0057, then the resulting permission is 0720.  The default permission is 0777 for a directory and 0666 for a file.  The default umask is 0027.  The umask must be specified in 4-digit octal notation (e.g. 0766). </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="sourceIfMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="sourceIfNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="sourceIfModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="sourceIfUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="proposedLeaseId"> Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. </param>
            <param name="leaseDuration"> The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease. </param>
            <param name="expiryOptions"> Required. Indicates mode of the expiry time. </param>
            <param name="expiresOn"> The time to set the blob to expiry. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination already exists, use a conditional request with If-None-Match: "*". </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Create(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Files.DataLake.Models.PathResourceType},System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.PathRenameMode},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{Azure.Storage.Files.DataLake.Models.PathExpiryOptions},System.String,System.Threading.CancellationToken)">
            <summary> Create File | Create Directory | Rename File | Rename Directory. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="resource"> Required only for Create File and Create Directory. The value must be "file" or "directory". </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="mode"> Optional. Valid only when namespace is enabled. This parameter determines the behavior of the rename operation. The value must be "legacy" or "posix", and the default value will be "posix". </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="renameSource"> An optional file or directory to be renamed.  The value must have the following format: "/{filesystem}/{path}".  If "x-ms-properties" is specified, the properties will overwrite the existing properties; otherwise, the existing properties will be preserved. This value must be a URL percent-encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="sourceLeaseId"> A lease ID for the source path. If specified, the source path must have an active lease and the lease ID must match. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="umask"> Optional and only valid if Hierarchical Namespace is enabled for the account. When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created.  The resulting permission is given by p bitwise and not u, where p is the permission and u is the umask.  For example, if p is 0777 and u is 0057, then the resulting permission is 0720.  The default permission is 0777 for a directory and 0666 for a file.  The default umask is 0027.  The umask must be specified in 4-digit octal notation (e.g. 0766). </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="sourceIfMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="sourceIfNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="sourceIfModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="sourceIfUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="proposedLeaseId"> Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. </param>
            <param name="leaseDuration"> The lease duration is required to acquire a lease, and specifies the duration of the lease in seconds.  The lease duration must be between 15 and 60 seconds or -1 for infinite lease. </param>
            <param name="expiryOptions"> Required. Indicates mode of the expiry time. </param>
            <param name="expiresOn"> The time to set the blob to expiry. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create or rename a file or directory.    By default, the destination is overwritten and if the destination already exists and has a lease the lease is broken.  This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).  To fail if the destination already exists, use a conditional request with If-None-Match: "*". </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.UpdateAsync(Azure.Storage.Files.DataLake.Models.PathUpdateAction,Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode,System.IO.Stream,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Append Data | Flush Data | Set Properties | Set Access Control. </summary>
            <param name="action"> The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, "setProperties" to set the properties of a file or directory, "setAccessControl" to set the owner, group, permissions, or access control list for a file or directory, or  "setAccessControlRecursive" to set the access control list for a directory recursively. Note that Hierarchical Namespace must be enabled for the account in order to use access control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive. </param>
            <param name="mode"> Mode "set" sets POSIX access control rights on files and directories, "modify" modifies one or more POSIX access control rights  that pre-exist on files and directories, "remove" removes one or more POSIX access control rights  that were present earlier on files and directories. </param>
            <param name="body"> Initial data. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="maxRecords"> Optional. Valid for "SetAccessControlRecursive" operation. It specifies the maximum number of files or directories on which the acl change will be applied. If omitted or greater than 2,000, the request will process up to 2,000 items. </param>
            <param name="continuation"> Optional. The number of paths processed with each invocation is limited. If the number of paths to be processed exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be percent-encoded and specified in a subsequent invocation of setAccessControlRecursive operation. </param>
            <param name="forceFlag"> Optional. Valid for "SetAccessControlRecursive" operation. If set to false, the operation will terminate quickly on encountering user errors (4XX). If true, the operation will ignore user errors and proceed with the operation on other sub-entities of the directory. Continuation token will only be returned when forceFlag is true in case of user errors. If not set the default value is false for this. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="retainUncommittedData"> Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation. </param>
            <param name="close"> Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.". </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="contentMD5"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
            <remarks> Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets properties for a file or directory, or sets access control for a file or directory. Data can only be appended to a file. Concurrent writes to the same file using multiple clients are not supported. This operation supports conditional HTTP requests. For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Update(Azure.Storage.Files.DataLake.Models.PathUpdateAction,Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode,System.IO.Stream,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Append Data | Flush Data | Set Properties | Set Access Control. </summary>
            <param name="action"> The action must be "append" to upload data to be appended to a file, "flush" to flush previously uploaded data to a file, "setProperties" to set the properties of a file or directory, "setAccessControl" to set the owner, group, permissions, or access control list for a file or directory, or  "setAccessControlRecursive" to set the access control list for a directory recursively. Note that Hierarchical Namespace must be enabled for the account in order to use access control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive. </param>
            <param name="mode"> Mode "set" sets POSIX access control rights on files and directories, "modify" modifies one or more POSIX access control rights  that pre-exist on files and directories, "remove" removes one or more POSIX access control rights  that were present earlier on files and directories. </param>
            <param name="body"> Initial data. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="maxRecords"> Optional. Valid for "SetAccessControlRecursive" operation. It specifies the maximum number of files or directories on which the acl change will be applied. If omitted or greater than 2,000, the request will process up to 2,000 items. </param>
            <param name="continuation"> Optional. The number of paths processed with each invocation is limited. If the number of paths to be processed exceeds this limit, a continuation token is returned in the response header x-ms-continuation. When a continuation token is  returned in the response, it must be percent-encoded and specified in a subsequent invocation of setAccessControlRecursive operation. </param>
            <param name="forceFlag"> Optional. Valid for "SetAccessControlRecursive" operation. If set to false, the operation will terminate quickly on encountering user errors (4XX). If true, the operation will ignore user errors and proceed with the operation on other sub-entities of the directory. Continuation token will only be returned when forceFlag is true in case of user errors. If not set the default value is false for this. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="retainUncommittedData"> Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation. </param>
            <param name="close"> Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.". </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="contentMD5"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="properties"> Optional. User-defined properties to be stored with the filesystem, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set.  If the filesystem exists, any properties not included in the list will be removed.  All properties are removed if the header is omitted.  To merge new and existing properties, first get all existing properties and the current E-Tag, then make a conditional request with the E-Tag and include values for all properties. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
            <remarks> Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets properties for a file or directory, or sets access control for a file or directory. Data can only be appended to a file. Concurrent writes to the same file using multiple clients are not supported. This operation supports conditional HTTP requests. For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.LeaseAsync(Azure.Storage.Files.DataLake.Models.PathLeaseAction,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Lease Path. </summary>
            <param name="xMsLeaseAction"> There are five lease actions: "acquire", "break", "change", "renew", and "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use "change" and specify the current lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease. Use "release" and specify the "x-ms-lease-id" to release a lease. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="xMsLeaseBreakPeriod"> The lease break period duration is optional to break a lease, and  specifies the break period of the lease in seconds.  The lease break  duration must be between 0 and 60 seconds. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="proposedLeaseId"> Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Lease(Azure.Storage.Files.DataLake.Models.PathLeaseAction,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Lease Path. </summary>
            <param name="xMsLeaseAction"> There are five lease actions: "acquire", "break", "change", "renew", and "release". Use "acquire" and specify the "x-ms-proposed-lease-id" and "x-ms-lease-duration" to acquire a new lease. Use "break" to break an existing lease. When a lease is broken, the lease break period is allowed to elapse, during which time no lease operation except break and release can be performed on the file. When a lease is successfully broken, the response indicates the interval in seconds until a new lease can be acquired. Use "change" and specify the current lease ID in "x-ms-lease-id" and the new lease ID in "x-ms-proposed-lease-id" to change the lease ID of an active lease. Use "renew" and specify the "x-ms-lease-id" to renew an existing lease. Use "release" and specify the "x-ms-lease-id" to release a lease. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="xMsLeaseBreakPeriod"> The lease break period duration is optional to break a lease, and  specifies the break period of the lease in seconds.  The lease break  duration must be between 0 and 60 seconds. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="proposedLeaseId"> Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Create and manage a lease to restrict write and delete access to the path. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.ReadAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Threading.CancellationToken)">
            <summary> Read File. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="range"> The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="xMsRangeGetContentMd5"> Optional. When this header is set to "true" and specified together with the Range header, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4MB in size. If this header is specified without the Range header, the service returns status code 400 (Bad Request). If this header is set to true when the range exceeds 4 MB in size, the service returns status code 400 (Bad Request). </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Read(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Threading.CancellationToken)">
            <summary> Read File. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="range"> The HTTP Range request header specifies one or more byte ranges of the resource to be retrieved. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="xMsRangeGetContentMd5"> Optional. When this header is set to "true" and specified together with the Range header, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4MB in size. If this header is specified without the Range header, the service returns status code 400 (Bad Request). If this header is set to true when the range exceeds 4 MB in size, the service returns status code 400 (Bad Request). </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Read the contents of a file.  For read operations, range requests are supported. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.GetPropertiesAsync(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Files.DataLake.Models.PathGetPropertiesAction},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Get Properties | Get Status | Get Access Control List. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="action"> Optional. If the value is "getStatus" only the system defined properties for the path are returned. If the value is "getAccessControl" the access control list is returned in the response headers (Hierarchical Namespace must be enabled for the account), otherwise the properties are returned. </param>
            <param name="upn"> Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If "false", the values will be returned as Azure Active Directory Object IDs. The default value is false. Note that group and application Object IDs are not translated because they do not have unique friendly names. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Get Properties returns all system and user defined properties for a path. Get Status returns all system defined properties for a path. Get Access Control List returns the access control list for a path. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.GetProperties(System.Nullable{System.Int32},System.Nullable{Azure.Storage.Files.DataLake.Models.PathGetPropertiesAction},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Get Properties | Get Status | Get Access Control List. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="action"> Optional. If the value is "getStatus" only the system defined properties for the path are returned. If the value is "getAccessControl" the access control list is returned in the response headers (Hierarchical Namespace must be enabled for the account), otherwise the properties are returned. </param>
            <param name="upn"> Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to User Principal Names.  If "false", the values will be returned as Azure Active Directory Object IDs. The default value is false. Note that group and application Object IDs are not translated because they do not have unique friendly names. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Get Properties returns all system and user defined properties for a path. Get Status returns all system defined properties for a path. Get Access Control List returns the access control list for a path. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.DeleteAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Delete File | Delete Directory. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="recursive"> Required. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Delete(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Delete File | Delete Directory. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="recursive"> Required. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> Delete the file or directory. This operation supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations). </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetAccessControlAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Set the owner, group, permissions, or access control list for a path. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetAccessControl(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Set the owner, group, permissions, or access control list for a path. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="owner"> Optional. The owner of the blob or directory. </param>
            <param name="group"> Optional. The owning group of the blob or directory. </param>
            <param name="permissions"> Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission.  The sticky bit is also supported.  Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetAccessControlRecursiveAsync(Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Set the access control list for a path and sub-paths. </summary>
            <param name="mode"> Mode "set" sets POSIX access control rights on files and directories, "modify" modifies one or more POSIX access control rights  that pre-exist on files and directories, "remove" removes one or more POSIX access control rights  that were present earlier on files and directories. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="forceFlag"> Optional. Valid for "SetAccessControlRecursive" operation. If set to false, the operation will terminate quickly on encountering user errors (4XX). If true, the operation will ignore user errors and proceed with the operation on other sub-entities of the directory. Continuation token will only be returned when forceFlag is true in case of user errors. If not set the default value is false for this. </param>
            <param name="maxRecords"> Optional. It specifies the maximum number of files or directories on which the acl change will be applied. If omitted or greater than 2,000, the request will process up to 2,000 items. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetAccessControlRecursive(Azure.Storage.Files.DataLake.Models.PathSetAccessControlRecursiveMode,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Set the access control list for a path and sub-paths. </summary>
            <param name="mode"> Mode "set" sets POSIX access control rights on files and directories, "modify" modifies one or more POSIX access control rights  that pre-exist on files and directories, "remove" removes one or more POSIX access control rights  that were present earlier on files and directories. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="forceFlag"> Optional. Valid for "SetAccessControlRecursive" operation. If set to false, the operation will terminate quickly on encountering user errors (4XX). If true, the operation will ignore user errors and proceed with the operation on other sub-entities of the directory. Continuation token will only be returned when forceFlag is true in case of user errors. If not set the default value is false for this. </param>
            <param name="maxRecords"> Optional. It specifies the maximum number of files or directories on which the acl change will be applied. If omitted or greater than 2,000, the request will process up to 2,000 items. </param>
            <param name="acl"> Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries. Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format "[scope:][type]:[id]:[permissions]". </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.FlushDataAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Threading.CancellationToken)">
            <summary> Set the owner, group, permissions, or access control list for a path. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="retainUncommittedData"> Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation. </param>
            <param name="close"> Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.". </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="contentMD5"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.FlushData(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Threading.CancellationToken)">
            <summary> Set the owner, group, permissions, or access control list for a path. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="retainUncommittedData"> Valid only for flush operations.  If "true", uncommitted data is retained after the flush operation completes; otherwise, the uncommitted data is deleted after the flush operation.  The default is false.  Data at offsets less than the specified position are written to the file when flush succeeds, but this optional parameter allows data after the flush position to be retained for a future flush operation. </param>
            <param name="close"> Azure Storage Events allow applications to receive notifications when files change. When Azure Storage Events are enabled, a file changed event is raised. This event has a property indicating whether this is the final change to distinguish the difference between an intermediate flush to a file stream and the final close of a file stream. The close query parameter is valid only when the action is "flush" and change notifications are enabled. If the value of close is "true" and the flush operation completes successfully, the service raises a file change notification with a property indicating that this is the final update (the file stream has been closed). If "false" a change notification is raised indicating the file has changed. The default is false. This query parameter is set to true by the Hadoop ABFS driver to indicate that the file stream has been closed.". </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="contentMD5"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="cacheControl"> Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentType"> Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentDisposition"> Optional. Sets the blob's Content-Disposition header. </param>
            <param name="contentEncoding"> Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="contentLanguage"> Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read request. </param>
            <param name="ifMatch"> Specify an ETag value to operate only on blobs with a matching value. </param>
            <param name="ifNoneMatch"> Specify an ETag value to operate only on blobs without a matching value. </param>
            <param name="ifModifiedSince"> Specify this header value to operate only on a blob if it has been modified since the specified date/time. </param>
            <param name="ifUnmodifiedSince"> Specify this header value to operate only on a blob if it has not been modified since the specified date/time. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.AppendDataAsync(System.IO.Stream,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Byte[],System.Byte[],System.String,System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> Append data to the file. </summary>
            <param name="body"> Initial data. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="transactionalContentHash"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="transactionalContentCrc64"> Specify the transactional crc64 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="flush"> If file should be flushed after the append. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.AppendData(System.IO.Stream,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Byte[],System.Byte[],System.String,System.String,System.String,System.Nullable{Azure.Storage.Files.DataLake.Models.EncryptionAlgorithmTypeInternal},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary> Append data to the file. </summary>
            <param name="body"> Initial data. </param>
            <param name="position"> This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.  It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.  The value must be the position where the data is to be appended.  Uploaded data is not immediately flushed, or written, to the file.  To flush, the previously uploaded data must be contiguous, the position parameter must be specified and equal to the length of the file after all data has been written, and there must not be a request entity body included with the request. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="contentLength"> Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data".  Must be the length of the request content in bytes for "Append Data". </param>
            <param name="transactionalContentHash"> Specify the transactional md5 for the body, to be validated by the service. </param>
            <param name="transactionalContentCrc64"> Specify the transactional crc64 for the body, to be validated by the service. </param>
            <param name="leaseId"> If specified, the operation only succeeds if the resource's lease is active and matches this ID. </param>
            <param name="encryptionKey"> Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption is performed with the root account encryption key.  For more information, see Encryption at Rest for Azure Storage Services. </param>
            <param name="encryptionKeySha256"> The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="encryptionAlgorithm"> The algorithm used to produce the encryption key hash. Currently, the only accepted value is "AES256". Must be provided if the x-ms-encryption-key header is provided. </param>
            <param name="flush"> If file should be flushed after the append. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="body" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetExpiryAsync(Azure.Storage.Files.DataLake.Models.PathExpiryOptions,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Sets the time a blob will expire and be deleted. </summary>
            <param name="expiryOptions"> Required. Indicates mode of the expiry time. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="expiresOn"> The time to set the blob to expiry. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.SetExpiry(Azure.Storage.Files.DataLake.Models.PathExpiryOptions,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Sets the time a blob will expire and be deleted. </summary>
            <param name="expiryOptions"> Required. Indicates mode of the expiry time. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="expiresOn"> The time to set the blob to expiry. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.UndeleteAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Undelete a path that was previously soft deleted. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="undeleteSource"> Only for hierarchical namespace enabled accounts. Optional. The path of the soft deleted blob to undelete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.PathRestClient.Undelete(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary> Undelete a path that was previously soft deleted. </summary>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="undeleteSource"> Only for hierarchical namespace enabled accounts. Optional. The path of the soft deleted blob to undelete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetAccessControlHeaders.LastModified">
            <summary> The data and time the file or directory was last modified. Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetAccessControlHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetAccessControlRecursiveHeaders.Continuation">
            <summary> When performing setAccessControlRecursive on a directory, the number of paths that are processed with each invocation is limited.  If the number of paths to be processed exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the setAccessControlRecursive operation to continue the setAccessControlRecursive operation on the directory. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetAccessControlRecursiveHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetExpiryHeaders.LastModified">
            <summary> Returns the date and time the container was last modified. Any operation that modifies the blob, including an update of the blob's metadata or properties, changes the last-modified time of the blob. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathSetExpiryHeaders.Version">
            <summary> Indicates the version of the Blob service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUndeleteHeaders.ResourceType">
            <summary> The type of the resource.  The value may be "file" or "directory".  If not set, the value is "file". </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUndeleteHeaders.Version">
            <summary> Indicates the version of the Blob service used to execute the request. This header is returned for requests made against version 2009-09-19 and above. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.LastModified">
            <summary> The data and time the file or directory was last modified.  Write operations on the file or directory update the last modified time. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.AcceptRanges">
            <summary> Indicates that the service supports requests for partial file content. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.CacheControl">
            <summary> If the Cache-Control request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentDisposition">
            <summary> If the Content-Disposition request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentEncoding">
            <summary> If the Content-Encoding request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentLanguage">
            <summary> If the Content-Language request header has previously been set for the resource, that value is returned in this header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentLength">
            <summary> The size of the resource in bytes. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentRange">
            <summary> Indicates the range of bytes returned in the event that the client requested a subset of the file by setting the Range request header. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentType">
            <summary> The content type specified for the resource. If no content type was specified, the default content type is application/octet-stream. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.ContentMD5">
            <summary> An MD5 hash of the request content. This header is only returned for "Flush" operation. This header is returned so that the client can check for message content integrity. This header refers to the content of the request, not actual file content. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.Properties">
            <summary> User-defined properties associated with the file or directory, in the format of a comma-separated list of name and value pairs "n1=v1, n2=v2, ...", where each value is a base64 encoded string. Note that the string may only contain ASCII characters in the ISO-8859-1 character set. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.XMsContinuation">
            <summary> When performing setAccessControlRecursive on a directory, the number of paths that are processed with each invocation is limited.  If the number of paths to be processed exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the setAccessControlRecursive operation to continue the setAccessControlRecursive operation on the directory. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.PathUpdateHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.ServiceListFileSystemsHeaders.Version">
            <summary> The version of the REST protocol used to process the request. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.ServiceListFileSystemsHeaders.Continuation">
            <summary> If the number of filesystems to be listed exceeds the maxResults limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the list operation to continue listing the filesystems. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.ServiceListFileSystemsHeaders.ContentType">
            <summary> The content type of list filesystem response. The default content type is application/json. </summary>
        </member>
        <member name="P:Azure.Storage.Files.DataLake.ServiceRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.ServiceRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of ServiceRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="url"> The URL of the service account, container, or blob that is the target of the desired operation. </param>
            <param name="version"> Specifies the version of the operation to use for this request. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="url" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.ServiceRestClient.ListFileSystemsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> List FileSystems. </summary>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> List filesystems and their properties in given account. </remarks>
        </member>
        <member name="M:Azure.Storage.Files.DataLake.ServiceRestClient.ListFileSystems(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> List FileSystems. </summary>
            <param name="prefix"> Filters results to filesystems within the specified prefix. </param>
            <param name="continuation"> Optional.  When deleting a directory, the number of paths that are deleted with each invocation is limited.  If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.  When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete operation to continue deleting the directory. </param>
            <param name="maxResults"> An optional value that specifies the maximum number of items to return. If omitted or greater than 5,000, the response will include up to 5,000 items. </param>
            <param name="timeout"> The timeout parameter is expressed in seconds. For more information, see &lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations"&gt;Setting Timeouts for Blob Service Operations.&lt;/a&gt;. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <remarks> List filesystems and their properties in given account. </remarks>
        </member>
        <member name="T:Azure.Storage.Sas.DataLakeAccountSasPermissions">
            <summary>
            <see cref="T:Azure.Storage.Sas.DataLakeAccountSasPermissions" /> contains the list of
            permissions that can be set for a data lake account's access policy.  Use
            <see cref="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeAccountSasPermissions)" />
            to set the permissions on the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.Read">
            <summary>
            Indicates that Read is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.Add">
            <summary>
            Indicates that Add is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.Create">
            <summary>
            Indicates that Create is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.Write">
            <summary>
            Indicates that Write is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.Delete">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.List">
            <summary>
            Indicates that List is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeAccountSasPermissions.All">
            <summary>
            Indicates that all permissions are set.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.DataLakeFileSystemSasPermissions">
            <summary>
            <see cref="T:Azure.Storage.Sas.DataLakeFileSystemSasPermissions" /> contains the list of
            permissions that can be set for a file systems's access policy.  Use
            <see cref="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeSasPermissions)" />
            to set the permissions on the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Read">
            <summary>
            Indicates that Read is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Add">
            <summary>
            Indicates that Add is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Create">
            <summary>
            Indicates that Create is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Write">
            <summary>
            Indicates that Write is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Delete">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.List">
            <summary>
            Indicates that List is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Move">
            <summary>
            Indicates that Move is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.Execute">
            <summary>
            Indicates that Execute is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.ManageOwnership">
            <summary>
            Indicates that Ownership is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.ManageAccessControl">
            <summary>
            Indicates that Permissions is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeFileSystemSasPermissions.All">
            <summary>
            Indicates that all permissions are set.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.DataLakeSasBuilder">
             <summary>
             <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" /> is used to generate a Shared Access
             Signature (SAS) for a Data Lake file system or path
            
             For more information, see
             <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas">
             Constructing a Service SAS</see>.
             </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Version">
            <summary>
            The storage service version to use to authenticate requests made
            with this shared access signature, and the service version to use
            when handling requests made with this shared access signature.
            </summary>
            <remarks>
            This property has been deprecated and we will always use the latest
            storage SAS version of the Storage service supported. This change
            does not have any impact on how your application generates or makes
            use of SAS tokens.
            </remarks>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Protocol">
            <summary>
            The optional signed protocol field specifies the protocol
            permitted for a request made with the SAS.  Possible values are
            <see cref="F:Azure.Storage.Sas.SasProtocol.HttpsAndHttp" />,
            <see cref="F:Azure.Storage.Sas.SasProtocol.Https" />, and
            <see cref="F:Azure.Storage.Sas.SasProtocol.None" />.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.StartsOn">
            <summary>
            Optionally specify the time at which the shared access signature
            becomes valid.  If omitted when DateTimeOffset.MinValue is used,
            start time for this call is assumed to be the time when the
            storage service receives the request.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.ExpiresOn">
            <summary>
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Permissions">
            <summary>
            The permissions associated with the shared access signature. The
            user is restricted to operations allowed by the permissions. This
            field must be omitted if it has been specified in an associated
            stored access policy.  The <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" />,
            <see cref="T:Azure.Storage.Sas.DataLakeFileSystemSasPermissions" />
            or <see cref="T:Azure.Storage.Sas.DataLakeAccountSasPermissions" /> can be used to create the
            permissions string.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.IPRange">
            <summary>
            Specifies an IP address or a range of IP addresses from which to
            accept requests. If the IP address from which the request
            originates does not match the IP address or address range
            specified on the SAS token, the request is not authenticated.
            When specifying a range of IP addresses, note that the range is
            inclusive.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Identifier">
            <summary>
            An optional unique value up to 64 characters in length that
            correlates to an access policy specified for the file system.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.FileSystemName">
            <summary>
            The name of the file system being made accessible.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Path">
            <summary>
            The name of the path being made accessible, or
            <see cref="F:System.String.Empty" /> for a file system SAS.
            Beginning in version 2020-02-10, setting
            <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.IsDirectory" /> to true means we will accept the
            Path as a directory for a directory SAS. If not set, this
            value is assumed to be a File Path for a File Path SAS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.IsDirectory">
            <summary>
            Beginning in version 2020-02-10, this value defines whether or
            not the <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.Path" /> is a directory. If this value is
            set to true, the Path is a Directory for a Directory SAS.
            If set to false or default, the Path is a File Path for a
            File Path SAS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.Resource">
             <summary>
             Specifies which resources are accessible via the shared access
             signature.
            
             Specify "b" if the shared resource is a blob. This grants access to
             the content and metadata of the blob.
            
             Specify "c" if the shared resource is a blob container. This grants
             access to the content and metadata of any blob in the container,
             and to the list of blobs in the container.
            
             Beginning in version 2018-11-09, specify "bs" if the shared resource
             is a blob snapshot.  This grants access to the content and
             metadata of the specific snapshot, but not the corresponding root
             blob.
            
             Beginning in version 2020-02-10, specify "d" if the shared resource
             is a DataLake directory. This grants access to the paths in the
             directory and to list the paths in the directory. When "d" is
             specified, the sdd query parameter is also required.
             </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.CacheControl">
            <summary>
            Override the value returned for Cache-Control response header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.ContentDisposition">
            <summary>
            Override the value returned for Content-Disposition response
            header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.ContentEncoding">
            <summary>
            Override the value returned for Cache-Encoding response header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.ContentLanguage">
            <summary>
            Override the value returned for Cache-Language response header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.ContentType">
            <summary>
            Override the value returned for Cache-Type response header.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.PreauthorizedAgentObjectId">
            <summary>
            Optional. Beginning in version 2020-02-10, this value will be used for
            the AAD Object ID of a user authorized by the owner of the
            User Delegation Key to perform the action granted by the SAS.
            The Azure Storage service will ensure that the owner of the
            user delegation key has the required permissions before granting access.
            No additional permission check for the user specified in this value will be performed.
            This cannot be used in conjuction with <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.AgentObjectId" />.
            This is only used with generating User Delegation SAS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.AgentObjectId">
            <summary>
            Optional. Beginning in version 2020-02-10, this value will be used for
            the AAD Object ID of a user authorized by the owner of the
            User Delegation Key to perform the action granted by the SAS.
            The Azure Storage service will ensure that the owner of the
            user delegation key has the required permissions before granting access.
            the Azure Storage Service will perform an additional POSIX ACL check to
            determine if the user is authorized to perform the requested operation.
            This cannot be used in conjuction with <see cref="P:Azure.Storage.Sas.DataLakeSasBuilder.PreauthorizedAgentObjectId" />.
            This is only used with generating User Delegation SAS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.CorrelationId">
            <summary>
            Optional. Beginning in version 2020-02-10, this value will be used for
            to correlate the storage audit logs with the audit logs used by the
            principal generating and distributing SAS. This is only used for
            User Delegation SAS.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasBuilder.EncryptionScope">
            <summary>
            Optional.  Encryption scope to use when sending requests authorized with this SAS URI.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />
            class.
            </summary>
            <remarks>
            This constructor has been deprecated. Please consider using
            <see cref="M:Azure.Storage.Sas.DataLakeSasBuilder.#ctor(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)" />
            to create a Service SAS. This change does not have any impact on how
            your application generates or makes use of SAS tokens.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.#ctor(Azure.Storage.Sas.DataLakeSasPermissions,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />
            class to create a Blob Service Sas.
            </summary>
            <param name="permissions">
            The permissions associated with the shared access signature.
            The user is restricted to operations allowed by the permissions.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
            <param name="expiresOn">
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.#ctor(Azure.Storage.Sas.DataLakeFileSystemSasPermissions,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />
            class to create a Blob Service Sas.
            </summary>
            <param name="permissions">
            The permissions associated with the shared access signature.
            The user is restricted to operations allowed by the permissions.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
            <param name="expiresOn">
            The time at which the shared access signature becomes invalid.
            This field must be omitted if it has been specified in an
            associated stored access policy.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeSasPermissions)">
            <summary>
            Sets the permissions for a file SAS.
            </summary>
            <param name="permissions">
            <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" /> containing the allowed permissions.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeAccountSasPermissions)">
            <summary>
            Sets the permissions for a path account level SAS.
            </summary>
            <param name="permissions">
            <see cref="T:Azure.Storage.Sas.DataLakeAccountSasPermissions" /> containing the allowed permissions.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeFileSystemSasPermissions)">
            <summary>
            Sets the permissions for a file system SAS.
            </summary>
            <param name="permissions">
            <see cref="T:Azure.Storage.Sas.DataLakeFileSystemSasPermissions" /> containing the allowed permissions.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(System.String,System.Boolean)">
            <summary>
            Sets the permissions for the SAS using a raw permissions string.
            </summary>
            <param name="rawPermissions">
            Raw permissions string for the SAS.
            </param>
            <param name="normalize">
            If the permissions should be validated and correctly ordered.
            </param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(System.String)">
            <summary>
            Sets the permissions for the SAS using a raw permissions string.
            </summary>
            <param name="rawPermissions">Raw permissions string for the SAS.</param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.ToSasQueryParameters(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Use an account's <see cref="T:Azure.Storage.StorageSharedKeyCredential" /> to sign this
            shared access signature values to produce the proper SAS query
            parameters for authenticating requests.
            </summary>
            <param name="sharedKeyCredential">
            The storage account's <see cref="T:Azure.Storage.StorageSharedKeyCredential" />.
            </param>
            <returns>
            The <see cref="T:Azure.Storage.Sas.DataLakeSasQueryParameters" /> used for authenticating
            requests.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.ToSasQueryParameters(Azure.Storage.Files.DataLake.Models.UserDelegationKey,System.String)">
            <summary>
            Use an account's <see cref="T:Azure.Storage.Files.DataLake.Models.UserDelegationKey" /> to sign this
            shared access signature values to produce the proper SAS query
            parameters for authenticating requests.
            </summary>
            <param name="userDelegationKey">
            A <see cref="T:Azure.Storage.Files.DataLake.Models.UserDelegationKey" /> returned from
            <see cref="M:Azure.Storage.Files.DataLake.DataLakeServiceClient.GetUserDelegationKeyAsync(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Threading.CancellationToken)" />.
            </param>
            <param name="accountName">The name of the storage account.</param>
            <returns>
            The <see cref="T:Azure.Storage.Sas.DataLakeSasQueryParameters" /> used for authenticating requests.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.EnsureState">
            <summary>
            Ensure the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />'s properties are in a
            consistent state.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.Equals(System.Object)">
            <summary>
            Check if two DataLakeSasBuilder instances are equal.
            </summary>
            <param name="obj">The instance to compare to.</param>
            <returns>True if they're equal, false otherwise.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasBuilder.GetHashCode">
            <summary>
            Get a hash code for the DataLakeSasBuilder.
            </summary>
            <returns>Hash code for the DataLakeSasBuilder.</returns>
        </member>
        <member name="T:Azure.Storage.Sas.DataLakeSasPermissions">
            <summary>
            <see cref="T:Azure.Storage.Sas.DataLakeSasPermissions" /> contains the list of
            permissions that can be set for a path's access policy.  Use
            <see cref="M:Azure.Storage.Sas.DataLakeSasBuilder.SetPermissions(Azure.Storage.Sas.DataLakeSasPermissions)" />
            to set the permissions on the <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Read">
            <summary>
            Indicates that Read is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Add">
            <summary>
            Indicates that Add is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Create">
            <summary>
            Indicates that Create is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Write">
            <summary>
            Indicates that Write is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Delete">
            <summary>
            Indicates that Delete is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.List">
            <summary>
            Indicates that List is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Move">
            <summary>
            Indicates that Move is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.Execute">
            <summary>
            Indicates that Execute is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.ManageOwnership">
            <summary>
            Indicates that Ownership is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.ManageAccessControl">
            <summary>
            Indicates that Permissions is permitted.
            </summary>
        </member>
        <member name="F:Azure.Storage.Sas.DataLakeSasPermissions.All">
            <summary>
            Indicates that all permissions are set.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.DataLakeSasQueryParameters">
             <summary>
             A <see cref="T:Azure.Storage.Sas.DataLakeSasQueryParameters" /> object represents the components
             that make up an Azure Storage Shared Access Signature's query
             parameters.  You can construct a new instance using
             <see cref="T:Azure.Storage.Sas.DataLakeSasBuilder" />.
            
             For more information,
             <see href="https://docs.microsoft.com/rest/api/storageservices/create-service-sas">
             Create a service SAS</see>.
             </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyObjectId">
            <summary>
            Gets the Azure Active Directory object ID in GUID format.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyTenantId">
            <summary>
            Gets the Azure Active Directory tenant ID in GUID format
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyStartsOn">
            <summary>
            Gets the time at which the key becomes valid.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyExpiresOn">
            <summary>
            Gets the time at which the key becomes expires.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyService">
            <summary>
            Gets the Storage service that accepts the key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.KeyVersion">
            <summary>
            Gets the Storage service version that created the key.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.DataLakeSasQueryParameters.Empty">
            <summary>
            Gets empty shared access signature query parameters.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasQueryParameters.#ctor(System.String,System.Nullable{Azure.Storage.Sas.AccountSasServices},System.Nullable{Azure.Storage.Sas.AccountSasResourceTypes},Azure.Storage.Sas.SasProtocol,System.DateTimeOffset,System.DateTimeOffset,Azure.Storage.Sas.SasIPRange,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new BlobSasQueryParameters instance.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasQueryParameters.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Azure.Storage.Sas.BlobSasQueryParameters" />
            type based on the supplied query parameters <paramref name="values" />.
            All SAS-related query parameters will be removed from
            <paramref name="values" />.
            </summary>
            <param name="values">URI query parameters</param>
        </member>
        <member name="M:Azure.Storage.Sas.DataLakeSasQueryParameters.ToString">
            <summary>
            Convert the SAS query parameters into a URL encoded query string.
            </summary>
            <returns>
            A URL encoded query string representing the SAS.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasQueryParametersExtensions.ParseKeyProperties(Azure.Storage.Sas.DataLakeSasQueryParameters,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parses the key properties into the QueryParameters instance.
            </summary>
            <param name="parameters">
            The BlobSasQueryParameters or DataLakeSasQueryParameters instance.
            </param>
            <param name="values">
            Dictionary of keys and values.
            </param>
        </member>
        <member name="T:Azure.Storage.Sas.SasExtensions">
            <summary>
            Extension methods for Sas.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToPermissionsString(Azure.Storage.Sas.AccountSasResourceTypes)">
            <summary>
            Creates a string representing which resource types are allowed
            for <see cref="P:Azure.Storage.Sas.AccountSasBuilder.ResourceTypes" />.
            </summary>
            <returns>
            A string representing which resource types are allowed.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseResourceTypes(System.String)">
            <summary>
            Parse a string representing which resource types are accessible
            from a shared access signature.
            </summary>
            <param name="s">
            A string representing which resource types are accessible.
            </param>
            <returns>
            An <see cref="T:Azure.Storage.Sas.AccountSasResourceTypes" /> instance.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToProtocolString(Azure.Storage.Sas.SasProtocol)">
            <summary>
            Gets a string representation of the protocol.
            </summary>
            <returns>A string representation of the protocol.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseProtocol(System.String)">
            <summary>
            Parse a string representation of a protocol.
            </summary>
            <param name="s">A string representation of a protocol.</param>
            <returns>A <see cref="T:Azure.Storage.Sas.SasProtocol" />.</returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ToPermissionsString(Azure.Storage.Sas.AccountSasServices)">
            <summary>
            Creates a string representing which services can be used for
            <see cref="P:Azure.Storage.Sas.AccountSasBuilder.Services" />.
            </summary>
            <returns>
            A string representing which services are allowed.
            </returns>
            <remarks>
            The order here matches the order used by the portal when generating SAS signatures.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.ParseAccountServices(System.String)">
            <summary>
            Parse a string representing which services are accessible from a
            shared access signature.
            </summary>
            <param name="s">
            A string representing which services are accessible.
            </param>
            <returns>
            An <see cref="T:Azure.Storage.Sas.AccountSasServices" /> instance.
            </returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.FormatTimesForSasSigning(System.DateTimeOffset)">
            <summary>
            FormatTimesForSASSigning converts a time.Time to a snapshotTimeFormat string suitable for a
            SASField's StartTime or ExpiryTime fields. Returns "" if value.IsZero().
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.Sas.SasExtensions.AddToBuilder(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Helper method to add query param key value pairs to StringBuilder
            </summary>
            <param name="sb">StringBuilder instance</param>
            <param name="key">query key</param>
            <param name="value">query value</param>
        </member>
        <member name="T:Azure.Storage.Sas.SasQueryParametersInternals">
            <summary>
            Helper to access protected static members of SasQueryParameters.
            </summary>
        </member>
        <member name="P:Azure.Storage.Sas.SasQueryParametersInternals.DefaultSasVersionInternal">
            <summary>
            Settable internal property to allow different versions in test.
            </summary>
        </member>
        <member name="T:Azure.Storage.Sas.UserDelegationKeyProperties">
            <summary>
            Encapsulates the shared properties used by both
            BlobSasQueryParameters and DataLakeSasQueryParameters.
            </summary>
        </member>
        <member name="M:Azure.Storage.Sas.UserDelegationKeyProperties.AppendProperties(System.Text.StringBuilder)">
            <summary>
            Builds up the UserDelegationKey portion of the SAS query parameter string.
            </summary>
        </member>
        <member name="T:Azure.Storage.AggregatingProgressIncrementer">
            <summary>
            An accumulator for request and response data transfers.
            </summary>
        </member>
        <member name="M:Azure.Storage.AggregatingProgressIncrementer.Report(System.Int64)">
            <summary>
            Increments the current value and reports it to the progress handler
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Azure.Storage.AggregatingProgressIncrementer.Reset">
            <summary>
            Zeroes out the current accumulation, and reports it to the progress handler
            </summary>
        </member>
        <member name="P:Azure.Storage.AggregatingProgressIncrementer.None">
            <summary>
            Returns an instance that no-ops accumulation.
            </summary>
        </member>
        <member name="P:Azure.Storage.AggregatingProgressIncrementer.Current">
            <summary>
            Returns a long instance representing the current progress value.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.MaxIdleTimeMs">
            <summary>
            The maximum allowed time between read or write calls to the stream for IdleCancellingStream.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultSasVersion">
            <summary>
            Gets the default service version to use when building shared access
            signatures.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.MaxHashRequestDownloadRange">
            <summary>
            Max download range size while requesting a transactional hash.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultBufferSize">
            <summary>
            The default size of staged blocks when uploading small blobs.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.LargeBufferSize">
            <summary>
            The size of staged blocks when uploading large blobs.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.LargeUploadThreshold">
            <summary>
            The threshold where we switch from staging <see cref="F:Azure.Storage.Constants.DefaultBufferSize" />
            buffers to staging <see cref="F:Azure.Storage.Constants.LargeBufferSize" /> buffers.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultStreamingDownloadSize">
            <summary>
            The minimum number of bytes to download in Open Read.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultStreamCopyBufferSize">
            <summary>
            Different .NET implementations have different default sizes for <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
            and it's overloads. This is the default for .NET Core to be applied everywhere for test consistency.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultDownloadCopyBufferSize">
            <summary>
            The size of the buffer to use when copying streams during a
            download operation.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DefaultTrimBlobNameSlashes">
            <summary>
            Backwards compatible default value for trimming slashes on object name.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.BlockNameFormat">
            <summary>
            The default format we use for block names.  There are 50,000
            maximum blocks so we pad the size with up to 4 leading zeros.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.ConnectionStrings">
            <summary>
            Storage Connection String constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.ConnectionStrings.BlobEndpointPortNumber">
            <summary>
            The default port numbers for development storage credentials
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.HeaderNames">
            <summary>
            Header Name constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Blob">
            <summary>
            Blob constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.RootName">
            <summary>
            The Azure Storage name used to identify a storage account's root container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.LogsName">
            <summary>
            The Azure Storage name used to identify a storage account's logs container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Container.WebName">
            <summary>
            The Azure Storage name used to identify a storage account's web content container.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Blob.Lease.InfiniteLeaseDuration">
            <summary>
            Lease Duration is set as infinite when passed -1.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.File">
            <summary>
            File constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.File.Lease.InfiniteLeaseDuration">
            <summary>
            Lease Duration is set as infinite when passed -1.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.DataLake">
            <summary>
            Data Lake constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.BlobUriSuffix">
            <summary>
            The blob URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.BlobUriPeriodSuffix">
            <summary>
            The blob URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DfsUriSuffix">
            <summary>
            The DFS URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DfsUriPeriodSuffix">
            <summary>
            The DFS URI suffix.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorKey">
            <summary>
            The key of the object json object returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorCodeKey">
            <summary>
            The key of the error code returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.ErrorMessageKey">
            <summary>
            The key of the error message returned for errors.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.AlreadyExists">
            <summary>
            The Azure Storage error codes for Datalake Client.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.DefaultConcurrentTransfersCount">
            <summary>
            Default concurrent transfers count.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.Pre_2019_12_12_MaxAppendBytes">
            <summary>
            Max upload bytes for less than Service Version 2019-12-12.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.MaxAppendBytes">
            <summary>
            Max upload bytes.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.DataLake.IsDirectoryKey">
            <summary>
            Metadata key for isFolder property.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Queue">
            <summary>
            Queue constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Queue.MaxMessagesDequeue">
            <summary>
            QueueMaxMessagesDequeue indicates the maximum number of messages
            you can retrieve with each call to Dequeue.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Queue.QueueMessageMaxBytes">
            <summary>
            QueueMessageMaxBytes indicates the maximum number of bytes allowed for a message's UTF-8 text.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.ChangeFeed">
            <summary>
            ChangeFeed constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.QuickQuery">
            <summary>
            Quick Query constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Sas">
            <summary>
            Sas constant values.
            </summary>
        </member>
        <member name="F:Azure.Storage.Constants.Sas.PathStylePorts">
            <summary>
            List of ports used for path style addressing.
            Copied from Microsoft.Azure.Storage.Core.Util
            </summary>
        </member>
        <member name="T:Azure.Storage.Constants.Xml">
            <summary>
            XML Element Name constant values.
            </summary>
        </member>
        <member name="T:Azure.Storage.ContentHasher">
            <summary>
            Hashes Storage content.
            </summary>
        </member>
        <member name="M:Azure.Storage.ContentHasher.AssertResponseHashMatch(System.IO.Stream,Azure.Storage.StorageChecksumAlgorithm,Azure.Response)">
            <summary>
            Asserts the content of the given stream match the response content hash.
            </summary>
            <param name="content">Content to hash.</param>
            <param name="algorithm">Hash algorithm identifier.</param>
            <param name="response">Response containing a response hash.</param>
            <exception cref="T:System.ArgumentException">
            Throws if <paramref name="algorithm" /> is invalid.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Throws if the hashes do not match.
            </exception>
        </member>
        <member name="M:Azure.Storage.ContentHasher.AssertResponseHashMatch(System.Byte[],System.Int32,System.Int32,Azure.Storage.StorageChecksumAlgorithm,Azure.Response)">
            <summary>
            Asserts the content of the given array match the response content hash.
            </summary>
            <param name="content">Content to hash.</param>
            <param name="offset">Offset to start reading content at.</param>
            <param name="count">Number of bytes to read starting from the offset.</param>
            <param name="algorithm">Hash algorithm identifier.</param>
            <param name="response">Response containing a response hash.</param>
            <exception cref="T:System.ArgumentException">
            Throws if <paramref name="algorithm" /> is invalid.
            </exception>
            <exception cref="T:System.IO.InvalidDataException">
            Throws if the hashes do not match.
            </exception>
        </member>
        <member name="M:Azure.Storage.ContentHasher.GetHashOrDefault(System.IO.Stream,Azure.Storage.UploadTransferValidationOptions)">
            <summary>
            Computes the requested hash for an upload operation, or default.
            </summary>
            <param name="content">Content to hash.</param>
            <param name="options">Hash options.</param>
            <returns>
            Object containing the requested hash on its algorithm's respective property. If
            <paramref name="options" /> are default or specified as "None", then the returned result is default.
            </returns>
            <exception cref="T:System.ArgumentException">
            Throws if <paramref name="options" /> exists and <see cref="P:Azure.Storage.UploadTransferValidationOptions.ChecksumAlgorithm" />
            is invalid.
            </exception>
        </member>
        <member name="M:Azure.Storage.ContentHasher.GetHash(System.IO.Stream,Azure.Storage.StorageChecksumAlgorithm)">
            <summary>
            Computes the requested hash, if desired.
            </summary>
            <param name="content">Content to hash.</param>
            <param name="algorithmIdentifier">Algorithm to compute the hash with.</param>
            <returns>Object containing the requested hash, or no hash, on its algorithm's respective property.</returns>
            <exception cref="T:System.ArgumentException">
            Throws if <paramref name="algorithmIdentifier" /> is invalid.
            </exception>
        </member>
        <member name="M:Azure.Storage.ContentHasher.GetHash(System.Byte[],System.Int32,System.Int32,Azure.Storage.StorageChecksumAlgorithm)">
            <summary>
            Computes the requested hash, if desired.
            </summary>
            <param name="content">Content to hash.</param>
            <param name="offset">Starting offset of content array to compute with.</param>
            <param name="count">Numbert of bytes after offset to compute with.</param>
            <param name="algorithmIdentifier">Algorithm to compute the hash with.</param>
            <returns>Object containing the requested hash, or no hash, on its algorithm's respective property.</returns>
            <exception cref="T:System.ArgumentException">
            Throws if <paramref name="algorithmIdentifier" /> is invalid.
            </exception>
        </member>
        <member name="T:Azure.Storage.Errors">
            <summary>
            Create exceptions for common error cases.
            </summary>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyAuthTagMismatch">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L202
            </summary>
            <returns></returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyPlaintextCiphertextLengthMismatch">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L514
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyInvalidNonceLength">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L400
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Azure.Storage.Errors.CryptographyInvalidTagLength">
            <summary>
            From
            https://github.com/dotnet/runtime/blob/032a7dcbe1056493e8bab51e6b5b9503de727273/src/libraries/System.Security.Cryptography/src/Resources/Strings.resx#L418
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Azure.Storage.GeoRedundantReadPolicy">
            <summary>
            This policy is used if the SecondaryUri property is passed in on the clientOptions. It allows for storage
            accounts configured with RA-GRS to retry GET or HEAD requests against the secondary storage Uri.
            </summary>
        </member>
        <member name="T:Azure.Storage.HashAlgorithmHasher">
            <summary>
            HashAlgorithm wrapper for IHasher interface
            </summary>
        </member>
        <member name="T:Azure.Storage.IHasher">
            <summary>
            Interface to wrap either a HashAlgorithm or a NonCryptographicHashAlgorithm
            to provide a common interface for hashing a stream.
            </summary>
        </member>
        <member name="M:Azure.Storage.IHasher.ComputeHash(System.IO.Stream)">
            <summary>
            Hashes the contents of the stream.
            </summary>
            <param name="stream">Content</param>
        </member>
        <member name="T:Azure.Storage.NonCryptographicHashAlgorithmHasher">
            <summary>
            HashAlgorithm wrapper for IHasher interface.
            </summary>
        </member>
        <member name="M:Azure.Storage.StreamExtensions.GetLengthOrDefault(System.IO.Stream)">
            <summary>
            Some streams will throw if you try to access their length so we wrap
            the check in a TryGet helper.
            </summary>
        </member>
        <member name="T:Azure.Storage.Shared.PooledMemoryStream">
            <summary>
            Functions like a readable <see cref="T:System.IO.MemoryStream" /> but uses an ArrayPool to supply the backing memory.
            This stream support buffering long sizes.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.PooledMemoryStream.MaxArraySize">
            <summary>
            Size to rent from MemoryPool.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.PooledMemoryStream.ArrayPool">
            <summary>
            The backing array pool.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.PooledMemoryStream.AbsolutePosition">
            <summary>
            Absolute position of this stream in the larger stream it was chunked from.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.PooledMemoryStream.#ctor">
            <summary>
            Parameterless constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.PooledMemoryStream.BufferStreamPartitionInternal(System.IO.Stream,System.Int64,System.Int64,System.Int64,System.Buffers.ArrayPool{System.Byte},System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Buffers a portion of the given stream, returning the buffered stream partition.
            </summary>
            <param name="stream">
            Stream to buffer from.
            </param>
            <param name="minCount">
            Minimum number of bytes to buffer. This method will not return until at least this many bytes have been read from <paramref name="stream" /> or the stream completes.
            </param>
            <param name="maxCount">
            Maximum number of bytes to buffer.
            </param>
            <param name="absolutePosition">
            Current position of the stream, since <see cref="P:System.IO.Stream.Position" /> throws if not seekable.
            </param>
            <param name="arrayPool">
            Pool to rent buffer space from.
            </param>
            <param name="maxArrayPoolRentalSize">
            Max size we can request from the array pool.
            </param>
            <param name="async">
            Whether to perform this operation asynchronously.
            </param>
            <param name="cancellationToken">
            Cancellation token.
            </param>
            <returns>
            The buffered stream partition with memory backed by an array pool.
            </returns>
        </member>
        <member name="T:Azure.Storage.Shared.SlicedStream">
            <summary>
            Describes a stream that is a partition of another, larger stream.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.SlicedStream.AbsolutePosition">
            <summary>
            Absolute position of the start of this stream in the larger stream it was chunked from.
            </summary>
        </member>
        <member name="T:Azure.Storage.Shared.StorageClientConfiguration">
            <summary>
            Parent class of the *ClientConfiguration classes.
            Contains common properties used to create clients.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.StorageClientConfiguration.#ctor">
            <summary>
            Constructor for mocking.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.StorageExtensions.EscapePath(System.String,System.Boolean)">
            <param name="path">Path to operate on.</param>
            <param name="trimOuterSlashes">Whether to perform backwards-compatible trimming.</param>
        </member>
        <member name="M:Azure.Storage.Shared.StorageExtensions.UnescapePath(System.String,System.Boolean)">
            <param name="path">Path to operate on.</param>
            <param name="trimOuterSlashes">Whether to perform backwards-compatible trimming.</param>
        </member>
        <member name="T:Azure.Storage.Shared.WindowStream">
            <summary>
            Exposes a predetermined slice of a larger stream using the same Stream interface.
            There should not be access to the base stream while this facade is in use.
            </summary>
        </member>
        <member name="M:Azure.Storage.Shared.WindowStream.ReadByte">
            <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary><returns>The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</returns><exception cref="T:System.NotSupportedException">The stream does not support reading.</exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
            <remarks>
            Implementing this method takes advantage of any optimizations in the wrapped stream's implementation.
            </remarks>
        </member>
        <member name="M:Azure.Storage.Shared.StreamExtensions.GetPositionOrDefault(System.IO.Stream)">
            <summary>
            Some streams will throw if you try to access their length so we wrap
            the check in a TryGet helper.
            </summary>
        </member>
        <member name="T:Azure.Storage.Shared.ISupportsTenantIdChallenges">
            <summary>
            Options to be exposed in client options classes related to bearer token authorization challenge scenarios.
            </summary>
        </member>
        <member name="P:Azure.Storage.Shared.ISupportsTenantIdChallenges.EnableTenantDiscovery">
            <summary>
             Enables tenant discovery through the authorization challenge when the client is configured to use a TokenCredential.
            When enabled, the client will attempt an initial un-authorized request to prompt a challenge in order to discover the correct tenant for the resource.
            </summary>
        </member>
        <member name="T:Azure.Storage.ProgressIncrementingStream">
            <summary>
            Wraps a stream, and reports position updates to a progress incrementer
            </summary>
        </member>
        <member name="P:Azure.Storage.SharedAccessSignatureCredentials.SasToken">
            <summary>
            Gets the SAS token used to authenticate requests to the Storage
            service.
            </summary>
        </member>
        <member name="M:Azure.Storage.SharedAccessSignatureCredentials.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Azure.Storage.SharedAccessSignatureCredentials" /> class.
            </summary>
            <param name="sasToken">
            The SAS token used to authenticate requests to the Storage service.
            </param>
        </member>
        <member name="T:Azure.Storage.StorageClientOptions">
            <summary>
            Defines the client configuration options for connecting to Azure
            Storage.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Initialize(Azure.Core.ClientOptions)">
            <summary>
            Set common ClientOptions defaults for Azure Storage.
            </summary>
            <param name="options">Storage ClientOptions.</param>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy``1(Azure.AzureSasCredential,System.Uri)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <param name="resourceUri">Resource Uri. Must not contain shared access signature.</param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.AsPolicy(Azure.Core.TokenCredential,Azure.Core.ClientOptions)">
            <summary>
            Get an authentication policy to sign Storage requests.
            </summary>
            <param name="credential">Credential to use.</param>
            <param name="options"> The <see cref="T:Azure.Storage.Shared.ISupportsTenantIdChallenges" /> to apply to the credential. </param>
            <returns>An authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.GetAuthenticationPolicy(System.Object,Azure.Core.ClientOptions)">
            <summary>
            Get an optional authentication policy to sign Storage requests.
            </summary>
            <param name="credentials">Optional credentials to use.</param>
            <param name="options"> The <see cref="T:Azure.Core.ClientOptions" /> </param>
            <returns>An optional authentication policy.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Build(Azure.Core.ClientOptions,Azure.Core.Pipeline.HttpPipelinePolicy,System.Uri)">
            <summary>
            Create an HttpPipeline from Storage ClientOptions.
            </summary>
            <param name="options">The Storage ClientOptions.</param>
            <param name="authentication">Optional authentication policy.</param>
            <param name="geoRedundantSecondaryStorageUri">The secondary URI to be used for retries on failed read requests</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="M:Azure.Storage.StorageClientOptions.Build(Azure.Core.ClientOptions,System.Object,System.Uri)">
            <summary>
            Create an HttpPipeline from Storage ClientOptions.
            </summary>
            <param name="options">The Storage ClientOptions.</param>
            <param name="credentials">Optional authentication credentials.</param>
            <param name="geoRedundantSecondaryStorageUri">The secondary URI to be used for retries on failed read requests</param>
            <returns>An HttpPipeline to use for Storage requests.</returns>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.UseV1MD5">
            <summary>
            Gets or sets a value indicating whether the FISMA MD5 setting will be used.
            </summary>
            <value><c>false</c> to use the FISMA MD5 setting; <c>true</c> to use the .NET default implementation.</value>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.#ctor(System.Object,System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri},System.ValueTuple{System.Uri,System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.StorageConnectionString" /> class using the specified
            account credentials and service endpoints.
            </summary>
            <param name="storageCredentials">A StorageCredentials object.</param>
            <param name="blobStorageUri">A <see cref="T:System.Uri" /> specifying the Blob service endpoint or endpoints.</param>
            <param name="queueStorageUri">A <see cref="T:System.Uri" /> specifying the Queue service endpoint or endpoints.</param>
            <param name="tableStorageUri">A <see cref="T:System.Uri" /> specifying the Table service endpoint or endpoints.</param>
            <param name="fileStorageUri">A <see cref="T:System.Uri" /> specifying the File service endpoint or endpoints.</param>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.DevelopmentStorageAccount">
            <summary>
            Gets a <see cref="T:Azure.Storage.StorageConnectionString" /> object that references the well-known development storage account.
            </summary>
            <value>A <see cref="T:Azure.Storage.StorageConnectionString" /> object representing the development storage account.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.IsDevStoreAccount">
            <summary>
            Indicates whether this account is a development storage account.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.EndpointSuffix">
            <summary>
            The storage service hostname suffix set by the user, if any.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.Settings">
            <summary>
            The connection string parsed into settings.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.DefaultEndpoints">
            <summary>
            True if the user used a constructor that auto-generates endpoints.
            </summary>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.BlobEndpoint">
            <summary>
            Gets the primary endpoint for the Blob service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Blob service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.QueueEndpoint">
            <summary>
            Gets the primary endpoint for the Queue service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Queue service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.TableEndpoint">
            <summary>
            Gets the primary endpoint for the Table service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary Table service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.FileEndpoint">
            <summary>
            Gets the primary endpoint for the File service, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the primary File service endpoint.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.BlobStorageUri">
            <summary>
            Gets the endpoints for the Blob service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Blob service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.QueueStorageUri">
            <summary>
            Gets the endpoints for the Queue service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Queue service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.TableStorageUri">
            <summary>
            Gets the endpoints for the Table service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the Table service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.FileStorageUri">
            <summary>
            Gets the endpoints for the File service at the primary and secondary location, as configured for the storage account.
            </summary>
            <value>A <see cref="T:System.Uri" /> containing the File service endpoints.</value>
        </member>
        <member name="P:Azure.Storage.StorageConnectionString.Credentials">
            <summary>
            Gets the credentials used to create this <see cref="T:Azure.Storage.StorageConnectionString" /> object.
            </summary>
            <value>A StorageCredentials object.</value>
        </member>
        <member name="F:Azure.Storage.StorageConnectionString._accountName">
            <summary>
            Private record of the account name for use in ToString(bool).
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.Parse(System.String)">
            <summary>
            Parses a connection string and returns a <see cref="T:Azure.Storage.StorageConnectionString" /> created
            from the connection string.
            </summary>
            <param name="connectionString">A valid connection string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connectionString" /> is null or empty.</exception>
            <exception cref="T:System.FormatException">Thrown if <paramref name="connectionString" /> is not a valid connection string.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="connectionString" /> cannot be parsed.</exception>
            <returns>A <see cref="T:Azure.Storage.StorageConnectionString" /> object constructed from the values provided in the connection string.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.TryParse(System.String,Azure.Storage.StorageConnectionString@)">
            <summary>
            Indicates whether a connection string can be parsed to return a <see cref="T:Azure.Storage.StorageConnectionString" /> object.
            </summary>
            <param name="connectionString">The connection string to parse.</param>
            <param name="account">A <see cref="T:Azure.Storage.StorageConnectionString" /> object to hold the instance returned if
            the connection string can be parsed.</param>
            <returns><b>true</b> if the connection string was successfully parsed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ParseCore(System.String,Azure.Storage.StorageConnectionString@,System.Action{System.String})">
            <summary>
            Internal implementation of Parse/TryParse.
            </summary>
            <param name="connectionString">The string to parse.</param>
            <param name="accountInformation">The <see cref="T:Azure.Storage.StorageConnectionString" /> to return.</param>
            <param name="error">A callback for reporting errors.</param>
            <returns>If true, the parse was successful. Otherwise, false.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructBlobEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default blob endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default blob endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructFileEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default file endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default file endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructQueueEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default queue endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default queue endpoint.</returns>
        </member>
        <member name="M:Azure.Storage.StorageConnectionString.ConstructTableEndpoint(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the default queue endpoint using the specified protocol and account name.
            </summary>
            <param name="scheme">The protocol to use.</param>
            <param name="accountName">The name of the storage account.</param>
            <param name="endpointSuffix">The Endpoint DNS suffix; use <c>null</c> for default.</param>
            <param name="sasToken">The sas token; use <c>null</c> for default.</param>
            <returns>The default table endpoint.</returns>
        </member>
        <member name="T:Azure.Storage.StorageExceptionExtensions">
            <summary>
            Provide helpful information about errors calling Azure Storage endpoints.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.GetErrorCode(Azure.Response,System.String)">
            <summary>
            Attempt to get the error code from a response if it's not provided.
            </summary>
            <param name="response">The response.</param>
            <param name="errorCode">An optional error code.</param>
            <returns>The response's error code.</returns>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.IsUnavailable``1(Azure.Response{``0})">
            <summary>
            Check if a Response will throw an exception if you try to access
            its Value property.
            </summary>
            <typeparam name="T">Type of the Response Value.</typeparam>
            <param name="response">The response to check.</param>
            <returns>True if the response will throw.</returns>
        </member>
        <member name="M:Azure.Storage.StorageExceptionExtensions.AsNoBodyResponse``1(Azure.Response)">
            <summary>
            Create a response that will throw an exception if you try to access
            its Value property.
            </summary>
            <typeparam name="T">Type of the Response Value.</typeparam>
            <param name="rawResponse">The raw response.</param>
            <returns>A response that will throw if accessed.</returns>
        </member>
        <member name="T:Azure.Storage.StorageRequestValidationPipelinePolicy">
            <summary>
            Pipeline policy to verify x-ms-client-request-id and x-ms-client-return-request-id
            headers that are echoed back from a request match.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageRequestValidationPipelinePolicy.#ctor(Azure.Core.ClientOptions)">
            <summary>
            Create a new StorageRequestValidationPipelinePolicy
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageRequestValidationPipelinePolicy.OnReceivedResponse(Azure.Core.HttpMessage)">
            <summary>
            Verify x-ms-client-request-id and x-ms-client-return-request-id headers matches as
            x-ms-client-return-request-id is an echo of x-mis-client-request-id.
            </summary>
            <param name="message">The message that was sent</param>
        </member>
        <member name="T:Azure.Storage.StorageSharedKeyCredentialInternals">
            <summary>
            This class is added to access protected static methods off of the base class
            that should not be exposed directly to customers.
            </summary>
        </member>
        <member name="T:Azure.Storage.StorageSharedKeyPipelinePolicy">
            <summary>
            HttpPipelinePolicy to sign requests using an Azure Storage shared key.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageSharedKeyPipelinePolicy.#ctor(Azure.Storage.StorageSharedKeyCredential)">
            <summary>
            Create a new SharedKeyPipelinePolicy
            </summary>
            <param name="credentials">SharedKeyCredentials to authenticate requests.</param>
        </member>
        <member name="M:Azure.Storage.StorageSharedKeyPipelinePolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Sign the request using the shared key credentials.
            </summary>
            <param name="message">The message with the request to sign.</param>
        </member>
        <member name="P:Azure.Storage.StorageResponseClassifier.SecondaryStorageUri">
            <summary>
            The secondary URI to be used for retries on failed read requests
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageResponseClassifier.IsRetriableResponse(Azure.Core.HttpMessage)">
            <summary>
            Overridden version of IsRetriableResponse that allows for Storage specific retry logic.
            </summary>
            <param name="message">The message containing both Response and Request</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Storage.StorageResponseClassifier.IsErrorResponse(Azure.Core.HttpMessage)">
            <summary>
            Specifies if the response contained in the <paramref name="message" /> is not successful.
            </summary>
        </member>
        <member name="T:Azure.Storage.StorageVersionExtensions">
            <summary>
            Helpers to manage Storage service versions.
            </summary>
        </member>
        <member name="F:Azure.Storage.StorageVersionExtensions.LatestVersion">
            <summary>
            Gets the latest version of the service supported by this SDK.
            </summary>
        </member>
        <member name="F:Azure.Storage.StorageVersionExtensions.MaxVersion">
            <summary>
            Gets the latest version of the service supported by this SDK.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageVersionExtensions.ToVersionString(Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion)">
            <summary>
            Convert a Storage ServiceVersion enum to an x-ms-version string.
            </summary>
            <param name="version">The service version enum value.</param>
            <returns>The x-ms-version string.</returns>
        </member>
        <member name="M:Azure.Storage.StorageVersionExtensions.AsBlobsVersion(Azure.Storage.Files.DataLake.DataLakeClientOptions.ServiceVersion)">
            <summary>
            Convert a DataLake ServiceVersion to a Blobs ServiceVersion.
            </summary>
            <param name="version">The DataLake service version.</param>
            <returns>The Blobs service version.</returns>
        </member>
        <member name="T:Azure.Storage.UriExtensions">
            <summary>
            Extension methods used to manipulate URIs.
            </summary>
        </member>
        <member name="M:Azure.Storage.UriExtensions.AppendToPath(System.Uri,System.String)">
            <summary>
            Append a segment to a URIs path.
            </summary>
            <param name="uri">The URI.</param>
            <param name="segment">The relative segment to append.</param>
            <returns>The combined URI.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetQueryParameters(System.Uri)">
            <summary>
            Get the (already encoded) query parameters on a URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>Dictionary mapping query parameters to values.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetAccountNameFromDomain(System.Uri,System.String)">
            <summary>
            Get the account name from the domain portion of a Uri.
            </summary>
            <param name="uri">The Uri.</param>
            <param name="serviceSubDomain">The service subdomain used to validate that the
            domain is in the expected format. This should be "blob" for blobs, "file" for files,
            "queue" for queues, "blob" and "dfs" for datalake.</param>
            <returns>Account name or null if not able to be parsed.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetAccountNameFromDomain(System.String,System.String)">
            <summary>
            Get the account name from the host.
            </summary>
            <param name="host">Host.</param>
            <param name="serviceSubDomain">The service subdomain used to validate that the
            domain is in the expected format. This should be "blob" for blobs, "file" for files,
            "queue" for queues, "blob" and "dfs" for datalake.</param>
            <returns>Account name or null if not able to be parsed.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.GetPath(System.Uri)">
            <summary>
            If path starts with a slash, remove it
            </summary>
            <param name="uri">The Uri.</param>
            <returns>Sanitized Uri.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.IsHostIPEndPointStyle(System.Uri)">
            <summary>
            Check to see if Uri is using IP Endpoint style.
            </summary>
            <param name="uri">The Uri.</param>
            <returns>True if using IP Endpoint style.</returns>
        </member>
        <member name="M:Azure.Storage.UriExtensions.AppendQueryParameter(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Appends a query parameter to the string builder.
            </summary>
            <param name="sb">string builder instance.</param>
            <param name="key">query parameter key.</param>
            <param name="value">query parameter value.</param>
        </member>
        <member name="M:Azure.Storage.UriQueryParamsCollection.#ctor(System.String)">
            <summary>
            Takes encoded query params string, output decoded params map
            </summary>
            <param name="encodedQueryParamString"></param>
        </member>
        <member name="T:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy">
            <summary>
            The storage authorization policy which supports challenges including tenantId discovery.
            </summary>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.#ctor(Azure.Core.TokenCredential,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="credential"></param>
             <param name="scope"></param>
             <param name="enableTenantDiscovery"> </param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.#ctor(Azure.Core.TokenCredential,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
             <summary>
            
             </summary>
             <param name="credential"></param>
             <param name="scopes"></param>
             <param name="enableTenantDiscovery"> </param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequest(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestAsync(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param><returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestOnChallenge(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="M:Azure.Storage.StorageBearerTokenChallengeAuthorizationPolicy.AuthorizeRequestOnChallengeAsync(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="T:Azure.Core.AuthorizationChallengeParser">
            <summary>
            A helper class for parsing Authorization challenge headers.
            </summary>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.GetChallengeParameterFromResponse(Azure.Response,System.String,System.String)">
            <summary>
            Parses the specified parameter from a challenge hearder found in the specified <see cref="T:Azure.Response" />.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> to parse.</param>
            <param name="challengeScheme">The challenge scheme containing the <paramref name="challengeParameter" />. For example: "Bearer"</param>
            <param name="challengeParameter">The parameter key name containing the value to return.</param>
            <returns>The value of the parameter name specified in <paramref name="challengeParameter" /> if it is found in the specified <paramref name="challengeScheme" />.</returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Iterates through the challenge schemes present in a challenge header.
            </summary>
            <param name="headerValue">
            The header value which will be sliced to remove the first parsed <paramref name="challengeKey" />.
            </param>
            <param name="challengeKey">The parsed challenge scheme.</param>
            <returns>
            <c>true</c> if a challenge scheme was successfully parsed.
            The value of <paramref name="headerValue" /> should be passed to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)" /> to parse the challenge parameters if <c>true</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)">
            <summary>
            Iterates through a challenge header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.
            </summary>
            <param name="headerValue">The header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.</param>
            <param name="paramKey">The parsed challenge parameter key.</param>
            <param name="paramValue">The parsed challenge parameter value.</param>
            <param name="separator">The challenge parameter key / value pair separator. The default is '='.</param>
            <returns>
            <c>true</c> if the next available challenge parameter was successfully parsed.
            <c>false</c> if there are no more parameters for the current challenge scheme or an additional challenge scheme was encountered in the <paramref name="headerValue" />.
            The value of <paramref name="headerValue" /> should be passed again to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" /> to attempt to parse any additional challenge schemes if <c>false</c>.
            </returns>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="M:Azure.Core.AzureSasCredentialSynchronousPolicy.#ctor(Azure.AzureSasCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.AzureSasCredentialSynchronousPolicy" /> class.
            </summary>
            <param name="credential">The <see cref="T:Azure.Core.AzureSasCredentialSynchronousPolicy" /> used to authenticate requests.</param>
        </member>
        <member name="M:Azure.Core.AzureSasCredentialSynchronousPolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Method is invoked before the request is sent.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> containing the request.</param>
        </member>
        <member name="T:Azure.Core.ForwardsClientCallsAttribute">
            <summary>
            Marks methods that call methods on other client and don't need their diagnostics verified.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
        </member>
        <member name="M:Azure.Core.ForwardsClientCallsAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Azure.Core.ForwardsClientCallsAttribute" />.
            </summary>
            <param name="skipChecks"> Sets whether or not diagnostic scope validation should happen. </param>
        </member>
        <member name="P:Azure.Core.ForwardsClientCallsAttribute.SkipChecks">
            <summary>
            Gets whether or not we should validate DiagnosticScope for this API.
            In the case where there is an internal API that makes the Azure API call and a public API that uses it we need ForwardsClientCalls.
            If the public API will cache the results then the diagnostic scope will not always be created because an Azure API is not always called.
            In this case we need to turn off this validation for this API only.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.StorageClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="M:Azure.Core.LowLevelPageableHelpers.BuildPageForResponse(Azure.Response,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Azure.Page`1" /> for a given response.
            </summary>
            <param name="response"></param>
            <param name="itemPropertyName"></param>
            <param name="nextLinkPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
